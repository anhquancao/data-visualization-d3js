{"metadata":{"name":"MTM-G-checked","user_save_timestamp":"1190-11-11T11:00:00.000Z","auto_save_timestamp":"19719700-11-11T11:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"9265623F82D44A268E1C72C4FD7F48B6"},"cell_type":"code","source":":markdown\n#NamedVector.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res1: String = #NamedVector.scala\n"},{"metadata":{},"data":{"text/markdown":"#NamedVector.scala"},"output_type":"execute_result","execution_count":1,"time":"Took: 3 seconds 197 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2B8FFFF2610F40BA873138C331219D3E"},"cell_type":"code","source":"\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\n//import org.apache.spark.util.Vector\nimport org.apache.spark.mllib.linalg.DenseVector\n//import org.apache.spark.ml.linalg.{Vector, Vectors}\n//import org.apache.spark.mllib.linalg.{Vectors, Vector}\n//package org.lipn.som.global\n\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\n//import org.apache.spark.util.Vector\nimport scala.concurrent.duration.{FiniteDuration, Duration}\n//import org.lipn.som.som.pointObj\nimport org.apache.spark.util\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.DenseVector\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\nimport org.apache.spark.util\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":2,"time":"Took: 1 second 462 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"7128594164A24452A9A28D1190CCB97D"},"cell_type":"code","source":"//package org.lipn.som.utils\n\n//import org.apache.spark.ml.linalg.{Vector, Vectors}\nimport org.apache.spark.mllib.linalg.DenseVector\n\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 27/03/13\n * Time: 17:07\n * To change this template use File | Settings | File Templates.\n */\nclass NamedVector(elements: Array[Double], val cls: Int) extends DenseVector(elements) with Serializable {\n  override def toString(): String = {\n    \"#\"+cls+\" \"+super.toString()\n  }\n  def toJSON(clusterId: Int): String = {\n    var str = new StringBuilder\n    str append \"{\"\n    for (i <- 0 until elements.length) {\n      str append \"attr\"+i+\":\"+elements(i)+\", \"\n    }\n    str append \"cls:\\\"\"+cls+\"\\\", \"\n    str append \"clusterId:\"+clusterId\n    str append \"}\\n\"\n    str.toString()\n  }\n}","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\ndefined class NamedVector\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":3,"time":"Took: 1 second 381 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2736AD3B4D7749D886A123CA1D209170"},"cell_type":"code","source":":markdown\n#Matrix.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res5: String = #Matrix.scala\n"},{"metadata":{},"data":{"text/markdown":"#Matrix.scala"},"output_type":"execute_result","execution_count":4,"time":"Took: 1 second 910 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"7CDF2C41EAC5425782484B5FC1B9D70B"},"cell_type":"code","source":"//package org.lipn.som.utils\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 27/03/13\n * Time: 19:10\n * To change this template use File | Settings | File Templates.\n */\nclass Matrix(val elements: Array[Array[Double]]) extends Serializable {\n  //def this(nbRow: Int, nbCol: Int) = this(Array.tabulate(nbRow, nbCol){case (r, c) => r+c})\n  def this(nbElements: Int, initValue: Double) = this(Array.fill(nbElements, nbElements)(initValue))\n\n  def fillRow(row: Int, value: Double) = {elements(row) = Array.fill(elements.length)(value)}\n  def apply(row: Int, col: Int):Double = elements(row)(col)\n\n  def addel(row: Int, col: Int, value: Double) {elements(row)(col) += value}\n\n  def += (other: Matrix): Matrix = {\n    //todo: add length check\n    //if (length != other.length)\n    //  throw new IllegalArgumentException(\"Matrix of different length\")\n    var ans = 0.0\n    var i = 0\n    for (i <- 0 until elements.length) {\n      for (j <- 0 until elements(i).length) {\n        elements(i)(j) += other.elements(i)(j)\n      }\n    }\n    this\n  }\n\n  def /= (other: Matrix): Matrix = {\n    //todo: add length check\n    //if (length != other.length)\n    //  throw new IllegalArgumentException(\"Matrix of different length\")\n    var ans = 0.0\n    var i = 0\n    for (i <- 0 until elements.length) {\n      for (j <- 0 until elements(i).length) {\n        if (other.elements(i)(j) == 0) elements(i)(j) /= Double.MinPositiveValue\n        else elements(i)(j) /= other.elements(i)(j)\n      }\n    }\n    this\n  }\n\n  /*def strRow(rowId: Int): String = {\n    var first = true\n\n    var str = new StringBuilder()\n    str append \"[\"\n    for (x <- elements(rowId)) {\n      if (first) {\n        first = false\n      }\n      else {\n        str append \", \"\n      }\n      str append x\n    }\n    str append \"]\"\n    str.toString()\n  }\n\n  def strCol(colId: Int): String = {\n    var first = true\n\n    var str = new StringBuilder()\n    str append \"[\"\n    for (row <- elements) {\n      if (first) {\n        str append row(colId)\n        first = false\n      }\n      else {\n        str append \", \"\n        str append row(colId)\n      }\n    }\n    str append \"]\"\n    str.toString()\n  }*/\n\n  //override def toString = elements.mkString(\"|\", \" | \", \"|\")\n  override def toString: String = {\n    val str = new StringBuilder()\n    for (row <- elements) {\n      for (elem <- row) {\n        str.append(\" |\").append(\"%.2f\".format(elem))\n      }\n      str.append(\"|\\n\")\n    //elements.foreach{r =>\n      //str append row.mkString(\"|\", \" | \", \"|\")+\"\\n\"\n    }\n    str.toString()\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined class Matrix\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":5,"time":"Took: 1 second 577 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"87E58274AD6345E4B90AF097F294602F"},"cell_type":"code","source":":markdown\n#IO.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res8: String = #IO.scala\n"},{"metadata":{},"data":{"text/markdown":"#IO.scala"},"output_type":"execute_result","execution_count":6,"time":"Took: 1 second 684 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B842BCF3F492457B8A762B8B3CB174CC"},"cell_type":"code","source":"//package org.lipn.som.utils\n\nimport java.io.File\n\n/**\n * Company : Altic - LIPN\n * User: Tugdual Sarazin\n * Date: 06/06/14\n * Time: 11:48\n */\nobject IO {\n\n  /** Deletes each file or directory (recursively) in `files`.*/\n  def delete(files: Iterable[File]): Unit = files.foreach(delete)\n\n  /** Deletes `file`, recursively if it is a directory. */\n  def delete(file: File)\n  {\n      val deleted = file.delete()\n      if(!deleted && file.isDirectory)\n      {\n        delete(listFiles(file))\n        file.delete\n      }\n  }\n\n  /** Returns the children of directory `dir` that match `filter` in a non-null array.*/\n  def listFiles(filter: java.io.FileFilter)(dir: File): Array[File] = wrapNull(dir.listFiles(filter))\n\n  /** Returns the children of directory `dir` that match `filter` in a non-null array.*/\n  def listFiles(dir: File, filter: java.io.FileFilter): Array[File] = wrapNull(dir.listFiles(filter))\n\n  /** Returns the children of directory `dir` in a non-null array.*/\n  def listFiles(dir: File): Array[File] = wrapNull(dir.listFiles())\n\n  private def wrapNull(a: Array[File]) =\n    if(a == null)\n      new Array[File](0)\n    else\n      a\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import java.io.File\ndefined object IO\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":7,"time":"Took: 1 second 408 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"328A3B91F45A4B65AFB7357CD85B9A6D"},"cell_type":"code","source":"//package org.lipn.som.utils\n\nimport org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\n\n/**\n * Company : Altic - LIPN\n * User: Tugdual Sarazin\n * Date: 07/01/14\n * Time: 12:37\n */\nobject SparkReader {\n  def parse(sc: SparkContext, filePath: String, splitRegex: String): RDD[NamedVector] = {\n    sc.textFile(filePath).map{line =>\n      val arrayDouble = line.split(splitRegex).map(_.toDouble)\n      new NamedVector(arrayDouble.dropRight(1), arrayDouble.last.toInt)\n    }\n  }\n}","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\ndefined object SparkReader\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":8,"time":"Took: 1 second 218 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F39D6EFB33AF498D8AE47212D8D7CB83"},"cell_type":"code","source":":markdown\nSparkReader.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res12: String = SparkReader.scala\n"},{"metadata":{},"data":{"text/markdown":"SparkReader.scala"},"output_type":"execute_result","execution_count":9,"time":"Took: 1 second 580 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B29DB159843A4CA685233DC832AB8E1B"},"cell_type":"code","source":":markdown\n#NmiMetric.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res14: String = #NmiMetric.scala\n"},{"metadata":{},"data":{"text/markdown":"#NmiMetric.scala"},"output_type":"execute_result","execution_count":10,"time":"Took: 1 second 609 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B5027B8CE462421B85E62425AC56ADC8"},"cell_type":"code","source":"//package org.lipn.som.utils\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 24/05/13\n * Time: 19:02\n * To change this template use File | Settings | File Templates.\n */\n//object NmiMetric extends App {\nobject NmiMetric {\n  def jointProbabilty(x: Array[Int], y: Array[Int]) {\n\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined object NmiMetric\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":11,"time":"Took: 1 second 188 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"EC59E17DA3FD4582857637194E20BFBE"},"cell_type":"code","source":":markdown\n#AbstractPrototype.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res17: String = #AbstractPrototype.scala\n"},{"metadata":{},"data":{"text/markdown":"#AbstractPrototype.scala"},"output_type":"execute_result","execution_count":12,"time":"Took: 1 second 465 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"74AF2500F11D4470B975946BAAEE9254"},"cell_type":"code","source":"//package org.lipn.som.global\nimport org.apache.spark.mllib.linalg.{Vectors, Vector, DenseVector}\n\n//import org.apache.spark.util\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 14/06/13\n * Time: 12:42\n * To change this template use File | Settings | File Templates.\n */\nabstract class AbstractPrototype(val id: Int, var _point: DenseVector) extends Serializable {\n  def update(newPoint: DenseVector): Double = {\n //   val dist = _point.dist(newPoint)\n  val dist = Vectors.sqdist(_point, newPoint)\n\n    _point = newPoint\n    dist\n  }\n\n // def dist(data: Vector) = _point.dist(data) // a modifier: - ajouter une pondÃ©ration fixe; - ajouter une pondÃ©ration adaptative\ndef dist(data: DenseVector) = Vectors.sqdist(_point,data) // a modifier: - ajouter une pondÃ©ration fixe; - ajouter une pondÃ©ration adaptative\n\n//def dist(prototype: AbstractPrototype) = _point.dist(prototype._point)\ndef dist(prototype: AbstractPrototype) = Vectors.sqdist(_point,prototype._point)\n  \n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.{Vectors, Vector, DenseVector}\ndefined class AbstractPrototype\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":13,"time":"Took: 867 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0BD5BA82938F41DD8C42AECAD28ED107"},"cell_type":"code","source":":markdown \n#AbstractModel.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res20: String = #AbstractModel.scala\n"},{"metadata":{},"data":{"text/markdown":"#AbstractModel.scala"},"output_type":"execute_result","execution_count":14,"time":"Took: 1 second 366 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"D5C2612F7811426C94AD8C33103A6B51"},"cell_type":"code","source":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.DenseVector\n\n//import org.apache.spark.ml.linalg.{Vector,Vectors}\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 14/06/13\n * Time: 12:34\n * To change this template use File | Settings | File Templates.\n */\n\n class pointObj(\n    val data: DenseVector,//the numeric part of the data-point\n    //val label: Int,            //the real (provided) label\n    val id: Int               //the identifier(=numeroLigne) of the data-point\n    ) extends Serializable {\n  override def toString: String = {\" \"\n    //data.toArray.deep.mkString(\", \") + pointPartBin.toArray.deep.mkString(\", \")\n    /*\"partieNumerique -> \"+pointPartNum.toArray.deep.mkString(\"[\", \", \", \"]\") +\n    \"; partieBinaire -> \"+pointPartBin.toArray.deep.mkString(\"[\", \", \", \"]\")*/ \n  } \n }\n \n\nabstract class AbstractModel(val prototypes: Array[AbstractPrototype]) extends Serializable {\n  def size = prototypes.size\n\n  def findClosestPrototype(data: DenseVector): AbstractPrototype = {\n    prototypes.minBy(proto => proto.dist(data))\n  }\n  \n  def findClosestPrototypeId(data: DenseVector): AbstractPrototype = {\n    prototypes.minBy(proto => proto.dist(data))\n  }  \n\n  def apply(i: Int) = prototypes(i)\n\n  def assign(dataset: RDD[pointObj]): RDD[(Int, Int)] =  {\n    dataset.map(d => (this.findClosestPrototype(d.data).id, d.id))\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.DenseVector\ndefined class pointObj\ndefined class AbstractModel\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":15,"time":"Took: 1 second 96 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F5437D9C9BB94F9CA5F35AAF31ACC465"},"cell_type":"code","source":":markdown\n#WriterCluster.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res23: String = #WriterCluster.scala\n"},{"metadata":{},"data":{"text/markdown":"#WriterCluster.scala"},"output_type":"execute_result","execution_count":16,"time":"Took: 1 second 439 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B373C55A978C48938C66A7E045AF1AB3"},"cell_type":"code","source":"//package org.lipn.som.utils\nimport org.apache.spark.mllib.linalg.DenseVector\nimport java.io._\nimport org.apache.spark.rdd.RDD\n//import org.lipn.som.global.AbstractModel\n\n\nobject WriterClusters {\n  def js(data: RDD[NamedVector], model: AbstractModel, path: String) = {\n    val writer = new PrintWriter(new File(path))\n\n    val dataArray = data.collect\n    var str = \"var dataset = [\"\n\n    dataArray.foreach {d =>\n      val closestNeuron = model.findClosestPrototype(d)\n      if (d != dataArray.head) str += ','\n      str += d.toJSON(closestNeuron.id)\n    }\n\n    /*model.foreach{proto =>\n      str += ','\n      str += \"{\"\n      for (i <- 0 until proto._point.length) {\n        str += \"attr\"+i+\":\"+proto._point(i)+\", \"\n      }\n      str += \"cls:\\\"proto\\\", \"\n      str += \"clusterId:-\"+proto.id\n      str += \"}\\n\"\n    }\n    */\n    str += \"];\"\n    writer.write(str)\n\n    writer.close()\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\nimport java.io._\nimport org.apache.spark.rdd.RDD\ndefined object WriterClusters\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":17,"time":"Took: 1 second 217 milliseconds, at 2017-6-13 11:29"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"3F31F7F976564E849122CA88BA83B218"},"cell_type":"code","source":":markdown \n#AbstractTrainer.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res26: String = #AbstractTrainer.scala\n"},{"metadata":{},"data":{"text/markdown":"#AbstractTrainer.scala"},"output_type":"execute_result","execution_count":18,"time":"Took: 1 second 491 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0533032DC3BF449796B196D35705E2ED"},"cell_type":"code","source":"/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 14/06/13\n * Time: 12:31\n * To change this template use File | Settings | File Templates.\n */\n\nimport org.apache.spark.mllib.linalg.DenseVector\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\n//import org.apache.spark.ml.linalg.{Vector,Vectors}\n\ntrait AbstractTrainer extends Serializable {\n  private var _it = 0\n  def getLastIt = _it\n\n  private var _converge = 1.0\n  def getLastConvergence = _converge\n\n  private var _trainingDuration = Duration.Zero\n  def getLastTrainingDuration = _trainingDuration\n\n  protected def initModel(dataset: RDD[DenseVector], modelOptions: Map[String, String])\n\n  protected def trainingIteration(dataset: RDD[DenseVector], currentIteration: Int, maxIteration: Int): Double\n\n  protected def getModel: AbstractModel\n\n  final def training(dataset: RDD[DenseVector],\n                     modelOptions: Map[String, String] = Map.empty,\n                     maxIteration: Int = 100,\n                     endConvergeDistance: Double = 0.001): AbstractModel = {\n\n    val datasetSize = dataset.count()\n\n    val startLearningTime = System.currentTimeMillis()\n\n    val model = initModel(dataset, modelOptions)\n    _it = 0\n    _converge = 1.0\n\n    while (_converge > endConvergeDistance && _it < maxIteration) {\n\n      // Training iteration\n      val sumConvergence = trainingIteration(dataset, _it, maxIteration)\n\n      // process convergence\n      _converge = sumConvergence / datasetSize\n      _it += 1\n    }\n\n    _trainingDuration = Duration.create(System.currentTimeMillis() - startLearningTime, MILLISECONDS)\nprintln(\"le model apres training est : \"+getModel)\n\n    // return the model\n    getModel\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\ndefined trait AbstractTrainer\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":19,"time":"Took: 1 second 254 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"4AC18190D25842648090D447EC6D777A"},"cell_type":"code","source":":markdown\n#SomTrainerA.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res29: String = #SomTrainerA.scala\n"},{"metadata":{},"data":{"text/markdown":"#SomTrainerA.scala"},"output_type":"execute_result","execution_count":20,"time":"Took: 1 second 516 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6996406D601D42538560B9C882D6B797"},"cell_type":"code","source":"//package org.lipn.som.som\n\nimport scala.math.{abs, exp}\nimport java.util.Random\nimport org.apache.spark.rdd.RDD\n//import org.apache.spark.SparkContext._\n//import org.apache.spark.util.Vector\n//import org.lipn.som.global.{AbstractPrototype, AbstractModel, AbstractTrainer}\n//import org.lipn.som.utils.NamedVector\nimport scala.concurrent.duration.{FiniteDuration, Duration}\n//import org.apache.spark.ml.linalg.{Vector,Vectors}\nimport org.apache.spark.mllib.linalg.DenseVector\n\n/**\n * User: tug\n * Date: 14/06/13\n * Time: 12:35\n */\nclass SomTrainerA extends AbstractTrainer {\n  val DEFAULT_SOM_ROW = 10\n  val DEFAULT_SOM_COL = 10\n  val DEFAULT_TMAX = 8\n  val DEFAULT_TMIN = 1\n  val DEFAULT_INITMAP = 0\n  val DEFAULT_INITMAPFile = \"\"\n  val DEFAULT_SEPARATOR = \"\"\n  val SIZE_REAL_VARS = 10\n  \n  var tmax: Double = DEFAULT_TMAX\n  var tmin: Double = DEFAULT_TMIN\n  var initMap: Int = DEFAULT_INITMAP\n  var initMapFile: String = DEFAULT_INITMAPFile\n  var sep = DEFAULT_SEPARATOR\n  var sizeRealVars: Int = SIZE_REAL_VARS\n \n\n  protected var _somModel: SomModel = null\n  protected def getModel: AbstractModel = _somModel\n\n  protected def initModel(dataset: RDD[DenseVector], modelOptions: Map[String, String]) {\n    var nbRow = DEFAULT_SOM_ROW\n    var nbCol = DEFAULT_SOM_COL\n    if (modelOptions != null) {\n      nbRow = modelOptions(\"clustering.som.nbrow\").toInt\n      nbCol = modelOptions(\"clustering.som.nbcol\").toInt\n      tmax = modelOptions.get(\"clustering.som.tmax\").map(_.toDouble).getOrElse(DEFAULT_TMAX)\n      tmin = modelOptions.get(\"clustering.som.tmin\").map(_.toDouble).getOrElse(DEFAULT_TMIN)\n      initMap = modelOptions.get(\"clustering.som.initMap\").map(_.toInt).getOrElse(DEFAULT_INITMAP)\n      initMapFile = modelOptions.get(\"clustering.som.initMapFile\").map(_.toString).getOrElse(DEFAULT_INITMAPFile)\n      sep = modelOptions.get(\"clustering.som.separator\").map(_.toString).getOrElse(DEFAULT_SEPARATOR)\n      sizeRealVars = modelOptions.get(\"clustering.som.nbRealVars\").map(_.toInt).getOrElse(SIZE_REAL_VARS)\n    }\n\n    val mapSize = nbRow * nbCol\n    // todo : replace random = 42\n    var selectedDatas: Array[DenseVector] = Array()\n    if (initMap == 0) {    \n       selectedDatas = {\n      dataset.takeSample(withReplacement = false, mapSize, new Random().nextInt())\n    }\n    } else {\n       selectedDatas = {\n        scala.io.Source.fromFile(initMapFile).getLines().toArray.map(x => new DenseVector(x.split(sep).map(_.toDouble)))\n      }\n    }\n\n    // todo : Check /nbCol et %nbCOl\n    val neuronMatrix = Array.tabulate(mapSize)(id => new SomNeuron(id, id/nbCol, id%nbCol, selectedDatas(id)))\n    _somModel = new SomModel(nbRow, nbCol, neuronMatrix)\n  }//init model\n\n  protected def trainingIteration(dataset: RDD[DenseVector], currentIteration: Int, maxIteration: Int): Double = {\n    \n    val T = processT(maxIteration, currentIteration)\n\n    // create som observations\n    val mapping = dataset.map{d =>\n      val bestNeuron = _somModel.findClosestPrototype(d).asInstanceOf[SomNeuron]\n      \n      //ML: à rentrer dans la condition\n      var mapBin: scala.collection.immutable.Vector[(Int, Int)] = scala.collection.immutable.Vector()\n      \n      //binary part\n      if (d.size > this.sizeRealVars){\n        val d2: scala.collection.immutable.Vector[Double] = d.toArray.drop(sizeRealVars).toVector.asInstanceOf[scala.collection.immutable.Vector[Double]]\n        mapBin = d2.map(x => if (x == 1) (1,0) else (0,1))\n      }\n\n\n      _somModel.prototypes.map{proto =>\n        val neuron = proto.asInstanceOf[SomNeuron]\n        val factor = neuron.factorDist(bestNeuron, T) // K(delta(.-.)/T)\n             \n        //binary part\n        var mapBinPondere: scala.collection.immutable.Vector[(Double, Double)] = scala.collection.immutable.Vector()\n       \n        //ML:ajouter la condition (d.length > this.sizeRealVars), sinon vecteur vide\n        if (mapBin.size > 0) {\n          mapBinPondere = mapBin.map(x => (x._1 * factor, x._2 * factor))\n        }\n        \n        //ML: dans le cas de non présence de réelle vecteur vide, pareil pour les varibales binaires\n        new SomObsA(new DenseVector(d.toArray.take(sizeRealVars).map(_ * factor)), factor, mapBinPondere, neuron.id)\n        // ligne originale\n        //new SomObsA(Vector(d.toArray.take(sizeRealVars)) * factor, factor, mapBinPondere, neuron.id)\n\n      }\n    } //end mapping\n\n    // Concat observations\n    val concatObs = mapping.reduce{(obs1, obs2) =>\n      for (i <- 0 until obs1.length) {\n        obs1(i) += obs2(i)\n      }\n      obs1\n    }\n\n    // Update model and process convergence distance\n    //val x: Array[Double] = concatObs.map(_somModel.update)\n    concatObs.map(_somModel.update).sum\n    \n  }//end trainingIteration\n\n  //protected def processT(maxIt:Int, currentIt:Int) = maxIt.toFloat - currentIt\n   protected def processT(maxIt:Int, currentIt:Int) =\n      this.tmax*math.pow(this.tmin/this.tmax,currentIt/(maxIt.toFloat-1))\n\n  protected class SomModel(val nbRow: Int, val nbCol: Int, neurons: Array[SomNeuron])\n    extends AbstractModel(neurons.asInstanceOf[Array[AbstractPrototype]]) {\n\n    // Update the data point of the neuron\n    // and return the distance between the new and the old point\n    def update(obs: SomObsA) = neurons(obs.neuronId).update(obs.compute)\n\n\n    override def toString: String = {\n      var str = \"\"\n      for(neuron <- neurons) {\n        str += neuron+\"\\n\"\n      }\n      str\n    }\n  }\n\n  protected class SomNeuron(id: Int, val row: Int, val col: Int, point: DenseVector) extends AbstractPrototype(id, point) {\n    def factorDist(neuron: SomNeuron, T: Double): Double = {\n      exp(-(abs(neuron.row - row) + abs(neuron.col - col)) / T)\n    }\n\n    override def toString: String = {\n      \"(\"+row+\", \"+col+\") -> \"+point\n    }\n  }\n\n  protected class SomObsA(var numerator:DenseVector, var denominator: Double, var mapBinPonderation: scala.collection.immutable.Vector[(Double, Double)], val neuronId: Int) extends Serializable {\n    def +(obs: SomObsA): SomObsA = {\n      //ML:que lorsqu'on a des données réelles\n      numerator = new DenseVector( obs.numerator.toArray.zip(numerator.toArray).map( x => x._1 + x._2 ) )\n      denominator += obs.denominator\n      \n\n      // calcul de la somme des pondÃ©ration des 1 et des 0\n     //ML:ajouter la condition (d.length > this.sizeRealVars)\n      \n      var mapBinPonderation2: scala.collection.immutable.Vector[(Double, Double)] = scala.collection.immutable.Vector()\n    if (mapBinPonderation.size>0)\n      {\n      for (i <-0 until mapBinPonderation.size){\n        val c1: Double = mapBinPonderation(i)._1 + obs.mapBinPonderation(i)._1\n        val c0: Double = mapBinPonderation(i)._2 + obs.mapBinPonderation(i)._2\n         mapBinPonderation2==mapBinPonderation2 :+ (c1, c0)\n      }\n      mapBinPonderation = mapBinPonderation2\n    }\n      \n      this\n    }\n\n    //def compute = numerator / denominator\n    def compute = {\n      // Linge originale\n      //val newPointsReal = numerator / denominator\n      val newPointsReal = new DenseVector( numerator.toArray.map(_ / denominator) )\n      \n      // calcul de la mediane\n      //ML:ajouter la condition (d.length > this.sizeRealVars)\n      //var newPointsBin:Array[Double]=Array()\n      \n      var newPointsBin: scala.collection.immutable.Vector[Double] = scala.collection.immutable.Vector()\n      \n      if (mapBinPonderation.size>0)\n      {\n        newPointsBin = mapBinPonderation.map {e =>\n        if (e._1 >= e._2) 1.0 else 0.0}\n      }\n     \n      // concatenation de la partie real et binaire\n      new DenseVector(newPointsReal.toArray ++ newPointsBin) \n       \n    }\n\n    override def toString = numerator.toString()+\" : \"+denominator.toString\n  }//end SomObsA\n\n\n\n  def purity(dataset: RDD[NamedVector]): Double = {\n    //val nbRealClass = dataset.map(_.cls).reduce(case(cls1,cls2))\n\n    val sumAffectedDatas = dataset.map(d => ((_somModel.findClosestPrototype(d).id, d.cls), 1))\n      .reduceByKey{case (sum1, sum2) => sum1+sum2}\n\n    val maxByCluster = sumAffectedDatas.map(sa => (sa._1._1, sa._2))\n      .reduceByKey{case (sum1, sum2) => sum1.max(sum2) }\n      .map(_._2)\n      .collect()\n\n    maxByCluster.sum / dataset.count().toDouble\n  }\n\n  def affectations(dataset: RDD[NamedVector]): RDD[(Int, Int)] = {\n    dataset.map(d => (d.cls, _somModel.findClosestPrototype(d).id))\n  }\n} //end SomTrainerA\n\n class pointObj(\n    val data: DenseVector,//the numeric part of the data-point\n    //val label: Int,            //the real (provided) label\n    val id: Int               //the identifier(=numeroLigne) of the data-point\n    ) extends Serializable {\n  override def toString: String = {\" \"\n    //data.toArray.deep.mkString(\", \") + pointPartBin.toArray.deep.mkString(\", \")\n    /*\"partieNumerique -> \"+pointPartNum.toArray.deep.mkString(\"[\", \", \", \"]\") +\n    \"; partieBinaire -> \"+pointPartBin.toArray.deep.mkString(\"[\", \", \", \"]\")*/ \n  } \n }\n \n","outputs":[{"name":"stdout","output_type":"stream","text":"import scala.math.{abs, exp}\nimport java.util.Random\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\nimport org.apache.spark.mllib.linalg.DenseVector\ndefined class SomTrainerA\ndefined class pointObj\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":21,"time":"Took: 1 second 985 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"DD16EAC03BA54D9C80AD4C60D31DD65A"},"cell_type":"code","source":":markdown\n#RunSom.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res32: String = #RunSom.scala\n"},{"metadata":{},"data":{"text/markdown":"#RunSom.scala"},"output_type":"execute_result","execution_count":22,"time":"Took: 1 second 487 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"951756FD367C44808BEBE637EA7EC99C"},"cell_type":"code","source":"//package org.lipn.som.som\n\n/*import org.lipn.som.global.AbstractModel\nimport org.lipn.som.global.AbstractModel\nimport org.lipn.som.global.AbstractPrototype\nimport org.lipn.som.global.AbstractTrainer\nimport org.lipn.som.utils.NamedVector\nimport org.lipn.som.utils.DataGenerator\n*/\n\n\nobject RunSom{\n  \n    def main(args:Array[String]) {\n      run(\n          sparkMaster = args(0),\n          intputFile = args(1),\n          outputDir = args(2),\n          execName = args(3),\n          nbRow = args(4).toInt,\n          nbCol = args(5).toInt,\n          tmin = args(6).toDouble,\n          tmax = args(7).toDouble,\n          convergeDist = args(8).toDouble,\n          maxIter = args(9).toInt,\n          sep = args(10),\n          initMap = args(11).toInt, //0: initialisation aleatoire\n          initMapFile = args(12)\n      )  \n    }\n  \n  def run(\n    sparkMaster: String,\n    intputFile: String,\n    outputDir: String,\n    execName: String = \"RunSom\",\n    nbRow: Int = 10, \n    nbCol: Int = 10, \n    tmin: Double = 0.9, \n    tmax: Double = 8,\n    convergeDist: Double = -0.001,\n\t\tmaxIter: Int = 50,\n\t\tsep : String = \";\",\n\t\tinitMap: Int = 0,\n\t\tinitMapFile : String = \"\",\n\t\tnbRealVars : Int = 10\n    ) = {\n    val sparkConf = new SparkConf().setAppName(execName)\n\t\tsparkConf.setMaster(sparkMaster)\n\t\tval sc = new SparkContext(sparkConf)\n\n    val somOptions = Map(\n    \t\t\"clustering.som.nbrow\" -> nbRow.toString, \n    \t\t\"clustering.som.nbcol\" -> nbCol.toString,\n    \t\t\"clustering.som.tmin\" -> tmin.toString,\n    \t\t\"clustering.som.tmax\" -> tmax.toString,\n    \t\t\"clustering.som.initMap\" -> initMap.toString,\n    \t\t\"clustering.som.initMapFile\" -> initMapFile.toString,   \n    \t\t\"clustering.som.separator\" -> sep.toString,\n        \"clustering.som.nbRealVars\" -> nbRealVars.toString\n    \t\t)\n\t    \t\n\t  val trainingDatasetId = sc.textFile(intputFile).map(x => new DenseVector(x.split(sep).map(_.toDouble))).cache() \n\t  \n\t  val trainingDataset = trainingDatasetId.map{ e =>\n\t     new DenseVector(e.toArray.take(e.size - 1)) \n\t  }.cache()\n\t    \n \n\t  println(s\"nbRow: ${trainingDataset.count()}\")\n\t    \t\t\n\t\tval model = trainingAndPrint(new SomTrainerA, trainingDataset, somOptions, maxIter, convergeDist)\n\t\tprint(\"le model est : \"+model)\n\t\tsc.parallelize(model.prototypes).saveAsTextFile(outputDir+\"/model\")\n\t    \t\n\t\t\n\t  // transformer un point de donnÃ©es en un objet contenant la donnÃ©es et son identifiant \n\t  val trainingDatasetObj = trainingDatasetId.map{ e =>\n\t    val dataPart = e.toArray.take(e.size - 1) // the last column represents the identifier\n\t    val id = e.toArray(e.size - 1).toInt\n\t    new pointObj(new DenseVector(dataPart), id)\n\t  }.cache()\n\t  \n\t  trainingDataset.unpersist(true) \n\t  \n\t\t//model.assign(trainingDatasetObj).saveAsTextFile(outputDir+\"/assignDatas\")\n\t\t\n//\t\tsc.stop()\n  }\n\n\n\tdef purity(model: AbstractModel, dataset: RDD[NamedVector]): Double = {\n\t\t\t//val nbRealClass = dataset.map(_.cls).reduce(case(cls1,cls2))\n\n\t\t\tval sumAffectedDatas = dataset.map(d => ((model.findClosestPrototype(d).id, d.cls), 1))\n\t\t\t\t\t.reduceByKey{case (sum1, sum2) => sum1+sum2}\n\n\t\t\tval maxByCluster = sumAffectedDatas.map(sa => (sa._1._1, sa._2))\n\t\t\t\t\t.reduceByKey{case (sum1, sum2) => sum1.max(sum2) }\n\t\t\t.map(_._2)\n\t\t\t.collect()\n\n\t\t\tmaxByCluster.sum / dataset.count().toDouble\n\t}\n\n\tdef trainingAndPrint(trainer: AbstractTrainer,\n\t\t\tdataset: RDD[DenseVector],\n\t\t\tmodelOptions: Map[String, String],\n\t\t\tmaxIteration: Int = 100,\n\t\t\tendConvergeDistance: Double): AbstractModel = {\n\t\t\tval model = trainer.training(dataset, modelOptions, maxIteration, endConvergeDistance)\n\t\t  // Initi  alisation du model\n\t\t\t//val trainer = new SomTrainer(nbRow, nbCol, trainingDataset, convergeDist, maxIter)\n\t\t\t//val model = trainer.model\n\n  \t\tprintln(\"-- Convergence Distance : \" + trainer.getLastConvergence)\n  \t\tprintln(\"-- NbIteration : \" + trainer.getLastIt)\n  \t\tprintln(\"-- Training duration : \" + trainer.getLastTrainingDuration)\n  \t\tprintln(\"-- The model : \" + model)\n  \t\t\n  \t\t\n  \t\tmodel\n\t}\n}\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined object RunSom\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":23,"time":"Took: 1 second 624 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"id":"0D9943E8FC48402083C7B5541F4AFD3A"},"cell_type":"markdown","source":"#DataGen"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C7147CCF43F941E787B71C1AD888EF40"},"cell_type":"code","source":"//package org.lipn.som.utils\nimport org.apache.spark.mllib.linalg.DenseVector\n\n//import util.Random\n//import org.apache.spark.util.Vector\n//import org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\nimport scala.Array\n\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 27/03/13\n * Time: 17:07\n * To change this template use File | Settings | File Templates.\n */\nobject DataGen extends Serializable {\n\n  class Center(val cls: Int, val rayon: Double, val elements: Array[Double]) extends Serializable {\n    def this(cls: Int, dims: Int, a: Double, b: Double, rayon: Double) = this(cls, rayon, Array.fill(dims)(new Random(42).nextGaussian() * a + b))\n  }\n\n\n  def generate(sc: SparkContext,\n                        numPoints: Int,\n                        nbCls: Int,\n                        d: Int,\n                        numPartitions: Int = 2): RDD[NamedVector] =\n  {\n    // First, generate some centers\n    val rand = new Random(42)\n    val r = 1.0\n    val centers = Array.fill(nbCls)(Array.fill(d)(rand.nextGaussian() * r))\n    // Then generate points around each center\n    sc.parallelize(0 until numPoints, numPartitions).map{ idx =>\n      val cls = idx % nbCls\n      val center = centers(cls)\n      val rand2 = new Random(42 + idx)\n      new NamedVector(Array.tabulate(d)(i => center(i) + rand2.nextGaussian()), cls)\n    }\n  }\n}\n\nobject DataGenerator extends Serializable {\n  private val rand = new Random\n\n  private case class DModel(A: Double, B: Double) {\n    def gen =  A * rand.nextDouble() + B\n  }\n\n  private case class PModel(cls: Int, dmodels: Array[DModel]) {\n    def genVector = new DenseVector(dmodels.map(_.gen))\n    def genNamedVector = new NamedVector(dmodels.map(_.gen), cls)\n  }\n\n  private def PModel2D(cls: Int, A: Double, B: Double, C: Double) = PModel(cls, Array(DModel(A, B), DModel(A, C)))\n\n  private def PModelND(cls: Int, dims: Int, A: Double, B: Double) = PModel(cls, Array.fill(dims)(DModel(A, B)))\n\n  class SModel(N: Int, pmodels: Array[PModel]) {\n    private def nextVector(i: Int) = pmodels(rand.nextInt(pmodels.size)).genVector\n    private def nextNamedVector(i: Int) = pmodels(rand.nextInt(pmodels.size)).genNamedVector\n    def getVector = Array.tabulate(N)(nextVector)\n    def getNamedVector = Array.tabulate(N)(nextNamedVector)\n  }\n  val CLS_1 = 1\n  val CLS_2 = 2\n  val CLS_3 = 3\n  val CLS_4 = 4\n\n  def genH2Dims(N: Int) = new SModel(N, Array(\n    PModel2D(CLS_1, 1, 1, 1),\n    PModel2D(CLS_1, 1, 1, 2),\n    PModel2D(CLS_1, 1, 1, 3),\n    PModel2D(CLS_1, 1, 2, 2),\n    PModel2D(CLS_1, 1, 3, 1),\n    PModel2D(CLS_1, 1, 3, 2),\n    PModel2D(CLS_1, 1, 3, 3)\n  ))\n\n  def gen2Cls2Dims(N: Int) = new SModel(N, Array(\n    PModel2D(CLS_1, 1, 1, 1),\n    PModel2D(CLS_2, 2, 2, 2)\n  ))\n\n  def gen2ClsNDims(N: Int, dims: Int) = new SModel(N, Array(\n    PModelND(CLS_1, dims, 1, 1),\n    PModelND(CLS_2, dims, 2, 2)\n  ))\n}\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\nimport org.apache.spark.rdd.RDD\nimport scala.Array\ndefined object DataGen\ndefined object DataGenerator\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":24,"time":"Took: 1 second 870 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"4169DCF0BBD34B898E5D688BDE5D8774"},"cell_type":"code","source":" import scala.math.max\n  val nbRowSOM = 10\n  val nbColSOM = 10\n  val nbIter = 30\n  val dataNbObs = 2000\n  val dataNbVars = 10\n  val dataNbCls = 2 //classes\n  val datas = DataGen.generate(sc, dataNbObs, dataNbCls, dataNbVars, max(dataNbObs/10000, 1))\n  datas.cache()\n  datas.count()\n  var startLearningTime = System.currentTimeMillis()\n\n println(\"****************\\n***** SOM  *****\\n****************\")\n  val som = new SomTrainerA\n  val somOptions = Map(\"clustering.som.nbrow\" -> nbRowSOM.toString, \"clustering.som.nbcol\" -> nbColSOM.toString)\n  val somConvergeDist = -0.1\n  startLearningTime = System.currentTimeMillis()\n  val model = som.training(datas.asInstanceOf[RDD[DenseVector]], somOptions, nbIter, somConvergeDist)\n  val somDuration = Duration(System.currentTimeMillis() - startLearningTime, MILLISECONDS)\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"****************\n***** SOM  *****\n****************\nle model apres training est : (0, 0) -> #1 [2.953232013957491,-0.2832385043692497,1.27543497802818,-0.45969137146165134,-0.3861469876640312,-0.4391357317935631,0.18729476962569291,0.4664804397639474,0.10572361505274075,0.5344941937382655]\n(0, 1) -> #0 [1.2323295083402657,1.3657272913893492,-0.38044618052174106,-1.3703555223060575,0.43772458295686534,-0.6159587960625854,-1.9518564463609214,-1.9593082797544747,1.5938551083054424,2.3710988135531617]\n(0, 2) -> #1 [2.052208747400609,-0.9742649705648516,2.3784459749232765,2.087933381339538,-1.2497235650980172,0.2535269169925962,-0.5749494574940976,-0.3848540240787517,-0.9990230169393254,0.6485712543670377]\n(0, 3) -> #0 [2.387290971313067,-0.43748328609999054,-1.24053200559735,-1.5939656988525996,1.506573510426794,1.5105691570394313,-0.3811025256418284,-1.1689868321599035,-0.38058678550424163,1.9114839986385663]\n(0, 4) -> #1 [1.460710851427638,1.1754892378084927,0.9894917471261381,0.7553185814006744,-1.7480634471282905,-0.6764611982501305,0.367760970349735,1.0330917808508269,-1.8357307342353275,2.0884249017783936]\n(0, 5) -> #0 [1.3554241601567634,1.7968537510989164,-2.469599498053345,-0.9138671805134837,0.32717986581748243,0.5426835896709815,-2.6241292140732058,-2.0761735281020273,1.003710875458975,1.4775899774975578]\n(0, 6) -> #0 [2.0815921966388506,-0.4871207973881283,-2.18064365704898,-2.1081950789009687,0.9786827060177952,-0.04174200255680005,-1.8031525412269376,-1.356729485195377,-0.6452550666758554,1.2779873992858728]\n(0, 7) -> #1 [2.427747626050949,-1.7300361534901132,1.1957670293947968,-0.7379643295641791,-2.3608367019266803,1.0996304157471166,-0.9108468070097315,0.03635397747094038,-1.6274273162831303,0.1327941961457981]\n(0, 8) -> #1 [2.3210990187033564,-0.9282309211046269,1.9917626209021777,-0.5590635587156962,-0.7122445967600673,0.6502882293439115,-0.3371364588313756,1.6434898809911143,-0.12423336224248005,-0.39215495938535455]\n(0, 9) -> #0 [1.3875243180153667,1.8794304954998418,-0.5475145251508846,-0.6527211042385536,0.2520912153239556,0.8946606731137036,0.005401765866726804,-0.9178897769424839,0.691118744486377,2.94099856889933]\n(1, 0) -> #1 [2.909264015741525,-0.6976559350277041,1.7106475264701513,0.6968604628096557,-1.4953388102118392,-1.13007253682753,-1.3365329537562318,0.5150249155224986,-0.29861420816349227,1.0684171744272013]\n(1, 1) -> #0 [2.2236648062161493,1.8038178317799343,-1.7117622148074751,0.8005177450384287,-1.1340425967936825,0.8683994694946064,-0.10681098205902961,-3.1664338936436085,0.45141319531878155,1.021714010444748]\n(1, 2) -> #1 [1.335887451546764,0.6148710417185357,0.8470033575053106,-0.03929530671131609,-1.7824700859536138,0.062189145761916864,0.504803900952707,0.6695595273712516,-1.0648352563089483,0.8707117176178727]\n(1, 3) -> #0 [1.7140113031209399,-0.11692275753797976,-1.1173938514330608,-0.7432200298696019,2.3673378523794866,1.9028937798692263,1.5713365350846265,-1.5772988827136618,-1.1230945225972062,1.107434388872123]\n(1, 4) -> #1 [0.8943836185637788,-0.40878418144961526,0.6881549157157396,0.44551680619500567,-0.35302209681640206,1.9822477042788713,-0.36067249766053133,1.3322996497204902,-0.5420892893479846,0.7406916556137969]\n(1, 5) -> #1 [1.0161406554891785,-0.8787565072810246,-0.478524122971699,-1.02762391139197,-0.2247496806928868,0.653243751803503,0.0885931794384166,2.0470397685630086,-0.9597693842995756,-0.08768770109778956]\n(1, 6) -> #1 [1.2224267107936342,0.9884832473676121,2.5661959421346556,0.3081675163771951,0.18464113767057144,-0.09829556939391781,-2.107509024675267,0.6018174029015352,-1.0512929033496714,-0.36978067503561546]\n(1, 7) -> #0 [1.7650967181719694,1.6590926734458766,-0.8768291266587326,-1.0090078202739825,0.17859204113035226,0.38362397254698605,-0.6483282634410452,-1.8882015340995846,1.2450448707569177,4.26477933407163]\n(1, 8) -> #1 [1.926076261805387,1.2090980921522172,1.981698308918498,-1.087346959506928,-2.5031731085412128,0.6438524206518237,-2.1873241078331276,1.1111327602708565,-1.399151230966659,2.5146423095542594]\n(1, 9) -> #1 [2.152237864095695,1.5444199719792298,0.4293906412407362,-0.40412191675921694,-1.1449904994914586,1.6083840052376248,-2.20414243484922,-0.3598383060495053,-1.3427793760324123,1.6111568376662047]\n(2, 0) -> #1 [1.1718339103355475,-1.3725211032521616,1.9485588699512166,-1.352534645701492,-1.1288303611521036,0.8653298645466805,-1.8815223329005997,0.5358215509880062,-0.6137005296189386,0.32510393281583566]\n(2, 1) -> #1 [2.148579094067134,0.8547184462053861,0.44207839031007545,-1.329600542448087,-0.7754852026154753,1.5252745596406647,-1.9444332850678205,1.5005954802027857,-0.6568024920651175,-1.1425758917842597]\n(2, 2) -> #0 [2.526139642210598,2.164613485966985,-3.097641852876622,-0.6562652111751601,1.3852305227622304,0.6086572365225601,1.5365900860091388,-2.186342024961845,-1.6241979265369915,1.284464199445794]\n(2, 3) -> #1 [1.5154385066987994,1.0230460531008978,1.5569954974576035,-0.9688390395500343,-0.5536926767321458,1.9033110260493442,-1.4210110837742387,-0.2447522999744799,-1.599503377444413,-1.293422342678126]\n(2, 4) -> #0 [1.508790515092726,1.4588018276744792,-1.1276610524111534,0.9358102453750261,-0.16548386368662976,0.0086012140613696,-1.0567528840559517,0.06362663905884336,0.7596026144317398,0.1915795882643332]\n(2, 5) -> #1 [2.1697090677379203,0.7809153241744302,1.4816945721988573,0.3263634232203376,-1.5481536069057296,-0.5094754674942505,-0.851792007289095,-0.06636180793314372,-1.7543933501229034,-0.8087222634691043]\n(2, 6) -> #0 [3.0218539442040875,1.6454390062203328,-1.2838607449779562,-0.508815860902853,0.7064033887705837,1.3897910228838088,0.28869539257725896,-1.665524696953323,-1.4844041890890396,1.1944894846757634]\n(2, 7) -> #0 [1.470339991694855,-0.010157572589280517,-1.8633744053969221,0.3329423666766236,-1.2979190083082497,1.6780302979248094,-1.689359848298552,-2.4336251922582663,-0.5209246037341153,1.6749092971207657]\n(2, 8) -> #0 [1.593421064463823,2.343910352006342,0.3220901462120467,-1.1649262340005921,1.5248144320865356,0.6507752148388627,-1.312206512048014,-1.6703999318872245,-0.1080420166646982,2.0267603838241968]\n(2, 9) -> #0 [1.3076544948728677,1.5420340896426432,-0.5453975751201969,-1.2557281156802707,-0.4263127283452233,0.06251773718861275,-2.1530001585203715,-0.9826711709170052,-0.6253376093764529,1.9856270721948535]\n(3, 0) -> #1 [1.2335633505111852,-0.7063484436970058,1.9849378971220473,-0.7461386966578559,-0.9890018794945941,-1.1446720788256248,-2.4103144283010915,-0.05255153043339189,-1.6778467735902138,-0.08026928645651565]\n(3, 1) -> #0 [3.117164965391205,2.1820175023148605,-2.1283497430660665,-1.6961860591487246,-0.23789799064039469,-1.2130690736583,-2.850755934091023,-0.5244718053995588,-0.6807395095493418,0.7221235879338146]\n(3, 2) -> #1 [2.0071387189824144,-0.9387027825828287,0.6079282738987155,-1.3741926375250184,-3.445345687999167,-0.6422786180452416,0.5167832728608501,-0.004978319810030607,-3.0363973703098726,0.571715738177524]\n(3, 3) -> #1 [1.2341773613604856,-0.9044989055114336,0.7166313020921335,0.03911780546546695,-2.1110627280532235,0.11060074775199744,0.12062099594399478,-0.8016123699870281,-0.3827628684685267,-0.1275823634958287]\n(3, 4) -> #1 [1.3709139630669465,-1.1305947416009798,2.0434200384244123,0.5367830092567594,-0.7946086985722928,0.9291393018878586,-0.5351158002416265,-0.6157282192704454,-1.0942409273635991,0.2894807869161075]\n(3, 5) -> #0 [-0.6843067658557151,0.601543176727304,0.37326383434058785,-1.2596052191661589,1.291060648797638,-0.3024703276676408,-0.605798152255471,-2.1363621824117467,0.6308268128399257,0.040347018263119594]\n(3, 6) -> #0 [3.5299192534959527,0.7764303542425187,-1.8446350802675222,-1.859118352833785,0.7337157500242545,1.0004890711080354,-0.13980788884718875,-0.020467437400944144,2.33331916239027,2.7386005743577275]\n(3, 7) -> #0 [2.7781540761943333,0.602478991891114,-0.9066582420624631,-0.46764337311040416,-0.7297719776854448,0.9592104834771905,-0.3468668601254259,-1.3086840551500818,0.7134946103601345,1.9283796864268112]\n(3, 8) -> #1 [2.181016704646276,-1.4843572911632459,1.2774913270819424,-0.28046885437156843,0.06069997849819053,-0.06318221699794196,-0.388282926870131,1.999564617161897,0.04061582004288056,1.2037378795402194]\n(3, 9) -> #1 [1.2483341530591932,-1.3377200468785975,1.8881961452677252,-2.169004359933012,-1.5373985603748757,-0.9700136157835679,-2.4244139456844573,0.1481686447854425,-1.8549342082360025,0.30806525148117103]\n(4, 0) -> #1 [2.33272551842448,1.013245441461556,1.1810251455344267,-0.9243514476072043,-1.8786110366109832,1.2830176014182146,-1.9874799342291012,-0.09434926882313077,-1.9729264592143125,0.8916228034559956]\n(4, 1) -> #0 [3.035259215497156,-0.2682111824111445,2.202392856257843,-1.3658507402280238,1.1262086078536109,-0.7415235275273546,-2.8046660949678075,-0.7960876583427636,0.5269632683551476,0.8780403678064914]\n(4, 2) -> #0 [3.0191946357332675,1.1925301900594123,-0.8948950273145452,0.6263872621164215,0.2120696434072613,0.037499257947750775,-2.4279738072825414,0.8904639421683584,0.5708667537710308,1.9427890781657062]\n(4, 3) -> #0 [3.2855529590962265,0.5524094178680632,-2.2325856730240137,-2.377362048986665,1.5462433039388632,0.9137689875495283,-1.043636879326748,-0.3456540492198077,0.061226014843740795,-0.017591035350498663]\n(4, 4) -> #0 [2.508333186790109,-0.4113555705190933,-0.3196401097153069,-0.0952269991240533,-1.8642947835157013,-0.3154550328655714,-0.5506705271124387,-0.8917928959698986,0.307210043064651,2.9872990349874216]\n(4, 5) -> #0 [0.7707111752768647,0.6594083575969089,-3.4347071300729093,-1.800284972704203,1.3447553614527026,1.4718540020884259,-0.7494015259486274,-1.2529609815835703,-1.20275892604761,2.3334473175530492]\n(4, 6) -> #1 [2.639621459346065,0.9206195454571636,1.68489557201497,1.4640259736079229,-1.0233989400392847,0.3478632265500739,-2.2122077631448915,1.8919588278338348,-3.436570876999668,0.93971393879637]\n(4, 7) -> #1 [0.9352282391830793,-0.45386830381989596,0.6410201418112558,-1.5648427386632036,-0.9465100602097445,0.38527332985409773,0.593936869512298,-0.4285589468896873,0.5229818070020147,0.819577224413874]\n(4, 8) -> #0 [3.131798690369611,0.31364885610543314,0.23286689659601345,-2.5966575660799522,2.142797366138455,0.1132056157762169,-1.3317641147975627,-1.0765107956468734,-0.5321676385779802,0.39526450695877946]\n(4, 9) -> #1 [2.288561883935601,1.2593984116177255,2.7832662646795856,-1.867861054160942,-0.6728488559073322,1.8721369824273482,0.2742278986861343,0.08340049854569365,-0.13533316862823686,-0.30003599063032355]\n(5, 0) -> #0 [3.2641626359376916,0.14309669488159926,-1.7856542933412043,-0.954429487040204,1.2704173220863477,-0.14475069614272906,0.13973734056096432,-2.1089213744056243,0.1314546965849504,0.7585596793247426]\n(5, 1) -> #0 [1.4038136435157231,1.4034873282467561,9.541310137495262E-4,-1.7749610421498645,1.1337239566720005,-1.5605660693302474,-0.8585479229227552,0.18362603665583754,1.3511804884779481,1.2443652946466381]\n(5, 2) -> #0 [1.8997620162511515,-0.008439000678051034,-0.9091612169330897,-2.3749701004950876,-0.07387198038014131,0.8446230690282093,-1.277202024517979,-4.811700264585125,0.22524479276663545,1.5889394922647075]\n(5, 3) -> #1 [2.2418286287802323,0.7973100412621641,2.098917988136998,-1.0713631307365339,-0.4519041572276088,0.6484699757998108,-0.6944966063697402,0.6320114557569451,0.09927413536435004,-0.6323676018092703]\n(5, 4) -> #0 [2.0979601146785702,1.9112260233138134,-0.9984395740461762,-0.6698876740594498,1.5329211622391339,0.17267538355542922,1.0103752959135779,-3.1118210530878443,-0.9832963505920019,0.4331357597246819]\n(5, 5) -> #0 [0.36244719586155905,0.47594671412777834,-0.40628917259404995,-1.8214163739169824,-0.5877599066326884,0.5056241695211557,-0.817370856393354,-1.0199337116847196,-0.7314033180335411,1.3329992314282064]\n(5, 6) -> #1 [1.2132472925454845,-1.2196146274823567,1.9854173389396776,-1.0440768336362918,-1.092312622364172,1.9843242956999803,-2.300007935297381,-0.8896761267873636,0.04078659523691708,0.3443962302454775]\n(5, 7) -> #0 [2.8610094871606897,0.02789681149030776,-1.145456276039185,1.1054450714282003,1.4607684416098197,1.2611102048124097,-1.0094235553178443,-3.2439941101149263,-1.1746997979318312,0.5522591513964309]\n(5, 8) -> #1 [0.9355067170760041,0.47056146175355695,2.6254275867326022,-0.776759729410845,-2.2675803592000863,-2.2833835911749296,0.17460723582838977,-1.0015286516501871,-1.6384155931854947,0.9240521892408626]\n(5, 9) -> #0 [2.249678816569407,1.6976622505889072,-0.20749378528403872,-0.5828196574129848,0.9892054640808994,0.0444278493378466,-2.0599488561893455,-2.9706653115580157,-0.5192877493779269,0.0477537476113119]\n(6, 0) -> #0 [1.3529309922810617,1.5706556823201057,-2.4604477443596924,-2.0572726569463757,2.7608571813920317,1.6713377167280377,-0.3796550994798627,-0.49385874870662994,-1.3503677482274552,1.7364042459540374]\n(6, 1) -> #1 [2.2767778482582166,-1.1672947938278595,1.4316405489120119,0.4722731763049661,-3.7266423990424284,-0.08026964015721227,-2.005816079882033,2.610340583728993,-1.0560918026986439,-0.5031924523152129]\n(6, 2) -> #0 [2.2348148889811617,2.2898543411883954,-1.913259560349492,0.5852248526070707,0.27144389130429636,0.4428391629438919,-1.4740930449194096,-1.1994056089514857,-0.2957084053302238,2.267737373191765]\n(6, 3) -> #0 [2.2111807627064164,0.041090890812024106,-1.12426258557329,-3.190472683187832,1.6737921846944073,1.0667590769261688,-2.3942917817928806,-0.6739311591476324,0.5558923724955805,1.7774513916590124]\n(6, 4) -> #1 [3.1751411954395143,-0.5623820540438957,1.072850674571973,1.0556899399969941,-1.1647986703265436,-2.437414329804525,0.5347539412266105,0.7161332919921184,-2.745563582741949,0.4808495450077622]\n(6, 5) -> #0 [1.6799148314598962,0.1611997350309451,-0.3687297429710271,-1.9721783135889983,0.2823638101516017,-0.05721477985894752,-1.1509644271694854,-0.5914606055482441,1.7111148390918929,0.1674382578718705]\n(6, 6) -> #1 [2.6596366793363475,0.15492359178255138,2.2385476894216283,-1.044068241108222,-0.4314531274247593,-1.1982054362260424,-2.905147474210182,1.3858279890097676,-1.9322393765065433,-0.6699461358300092]\n(6, 7) -> #0 [1.5628536100125399,-0.3749588755530967,-0.7666615702206148,0.7298348458459252,0.4674701383391096,0.6013264998757762,-0.7341552072989832,-0.3605658159563998,-1.0556961056461631,2.8102040071981196]\n(6, 8) -> #0 [1.6888528318457032,1.8385475679093735,-2.3441831543050107,-1.8837262557521686,-1.9619024946233758,-1.315468300673766,-1.0991796608710516,-2.3977083875633713,-0.7887160201948352,1.906906427861271]\n(6, 9) -> #1 [1.2475663476806547,0.7640300412079275,1.468766216804895,-2.148008851621613,-1.5854551697641341,0.36292463107474227,-1.2241369032204579,-0.5905177582431149,-0.16151867756854554,-0.07354942124604807]\n(7, 0) -> #0 [1.4492330942453666,1.4984066479619784,-0.6882608277898029,-0.4573900178967162,-0.646349676407517,1.686016390904156,-0.18198578277013477,-2.1042667448561767,-1.0155670990209091,2.6721565167799053]\n(7, 1) -> #0 [3.6884857164434997,1.0576613317559285,-2.510028052880309,-0.6755545144195817,1.4626008760316362,-0.13318122615489147,-0.07980466570321254,-0.26770317935717136,-0.4386840907675482,0.5029215929881232]\n(7, 2) -> #0 [-1.216848127149857,1.8371450163023941,-1.2330328769731755,-1.1755662061171746,1.961551944028264,0.38469551172308664,-0.9335071911025673,-0.45352731154449255,-0.23722422681635302,1.2089158300428728]\n(7, 3) -> #1 [2.7587631028936688,-0.5785174925121641,0.48853109689823493,-0.4730727774598302,-1.0682013664470282,-0.20334590512108325,-0.10864979433322536,0.01148974738732822,-2.270345953082816,-2.5254026360279815]\n(7, 4) -> #0 [1.9417900335865057,-0.11356467801376546,-1.1843749584804188,-0.9401698915137183,-2.530537740910038,0.765763862754073,0.4193651084853359,-2.3856476432291087,2.814289294798776,0.924359990539053]\n(7, 5) -> #1 [1.3623502886925403,1.0246763478334038,2.8381917818645293,-1.5304484923702764,-2.513249551496811,0.6385096930036787,-1.8899847682601596,-0.027189005217150952,-0.05928104001922452,0.9461897917668065]\n(7, 6) -> #0 [1.5433817094477857,2.099940088230348,-2.5267718054748,-1.404608116310254,-0.5712145295522253,0.6345723387370988,-1.233687387805,-1.0004981410867197,-0.9742026779716577,0.05868365727160052]\n(7, 7) -> #0 [0.7168895170482483,-0.2741227889512011,-0.22366247159303632,-1.3438124228514299,0.9794819980363034,0.08560699551115802,-2.0288451300659056,-0.49074736084113235,-0.49208531060738736,0.7857440473114802]\n(7, 8) -> #0 [1.2277810379369825,1.2708296564143318,0.47599914261812426,-1.7799739463781237,-1.4542483876018397,-0.7410468495111053,-1.6063194381849986,-0.965829779590914,-0.6087915152224697,1.5219449229720572]\n(7, 9) -> #1 [1.3071988373824435,-1.573547132866415,2.311239154946729,0.9633507806910884,-2.4878181001771353,0.06453506975383072,-1.0033025999131757,1.4293278380087853,-0.08604394872586107,-1.2149079332391173]\n(8, 0) -> #1 [1.0195990007833335,-0.6703275670088412,1.0574390866977246,1.0807338607818753,-0.9069172524856679,1.2491282031390145,-0.8147841338028756,0.2347004963829989,0.13664535999410887,-0.3321153638758862]\n(8, 1) -> #1 [1.576759946771308,-1.4339395390740985,2.018075524418345,-0.05720845654165574,-1.3055089760849377,-0.9556433558312847,1.1991870256177755,-0.20207922253073396,-1.8033284250826944,1.1687789002129922]\n(8, 2) -> #1 [2.352304258441487,0.8252051278492758,2.0511748978554145,0.7393093620403519,0.7948757151109178,0.9095965074626402,-1.7354449353191044,-0.038587842386079374,-1.109937303963965,1.1912845142261173]\n(8, 3) -> #0 [2.716743977207126,0.20469941065557007,-0.6561273842954041,-1.617682448759211,0.1139847983968193,0.3685483646981818,-0.3556847771508882,-1.693843016224747,0.212815251363221,0.04756942517760643]\n(8, 4) -> #1 [0.8863084094453213,-0.4287153714209537,1.2866895811849912,1.2863652920978665,0.4207599881774633,0.0683128711839216,1.3920712657430976,1.679887260501686,-0.7818004538104639,-0.8350560656225281]\n(8, 5) -> #0 [3.527801530615097,1.1226418338636677,-0.8566354542826743,-0.817538594779448,1.4768843678622177,1.8034186529794909,-1.3055908706679884,-0.5818991323768956,-0.5531822750520645,1.0187870033312825]\n(8, 6) -> #1 [0.8664899333338395,-0.2371259850255863,2.939354489139065,-0.8700317141030269,-0.9176458910478296,-1.3078488396307055,0.02844671839974744,-1.4708583822469794,0.22646506549176015,0.006323776763669298]\n(8, 7) -> #1 [1.0246393494050003,0.36321318539708136,1.6828090125040798,-0.2173633149608556,-2.428470273789856,0.35250821791623965,0.11568603421693047,0.055713239717241625,-1.1975992017038362,0.702388705581094]\n(8, 8) -> #0 [3.165384399251528,-0.36562944136941,-2.7987497272832065,-2.2044655910568762,1.335470553268232,0.42060901116534294,-0.8942200874960013,-0.3475755652760757,-1.2252908674255354,1.7570496179986785]\n(8, 9) -> #1 [0.981534020082299,-0.7797526839472416,3.013741128466326,-2.002272711537856,-0.4612644010142677,0.867153523199043,-1.1347574550767596,2.6959118404651843,-0.11262376560840992,0.11968785059619405]\n(9, 0) -> #0 [2.313909427965421,1.724036190823487,0.31871039468028584,-0.18404074146671978,-0.014492005510830297,0.1046465543849131,-1.291080793521864,0.04940585324583435,0.21088247873986388,1.344042314867727]\n(9, 1) -> #1 [2.317411477671559,0.8093043181514574,1.7271492547867637,-0.10893715346504873,-1.9821695938127337,2.5347697123886217,-0.43623105784766464,-0.815519738791183,-0.6762288076660453,-0.44039614769030194]\n(9, 2) -> #1 [2.731626651705964,0.28058675134491984,1.779615246627654,-0.4366641441298032,-1.220099235079691,1.6887026499325524,-0.898244055992893,-2.0003896732144506,-2.017688882996371,-0.6435488801578348]\n(9, 3) -> #0 [2.3005912556769266,2.1051112701101804,-0.27709742682885297,-1.206325219488495,0.7194383931298438,1.6933961771242803,0.1371840470083986,-2.23555687609078,1.0998285985584098,0.8960773736613711]\n(9, 4) -> #0 [2.320815776283398,-0.2592909052982225,-1.3784466793229408,-2.245055133607776,2.1902221863965137,0.22872158330117487,-1.692414453419798,-1.0734227848292566,-1.610898423379197,0.9994524582254269]\n(9, 5) -> #0 [1.3283541574105753,0.5280254082727993,-1.2673040230376054,-1.5259643257592925,0.049220791104997,2.3655476473732806,-0.8732471837764049,-2.2908362154695543,0.27536157527941757,0.2479695882803583]\n(9, 6) -> #0 [2.5709217065240284,1.8783861628825047,-0.678798200211318,-3.889635560943447,-1.4031488479553567,0.1789195409464609,0.008154865368167008,-1.5833209029302238,-1.723233690872004,1.9891526903902825]\n(9, 7) -> #1 [1.1009705108925074,-0.5859642220937157,2.1715190283060912,-1.4848258904472114,-1.1864817960776344,0.8602769694105339,0.01523148581093825,1.439870358377401,-1.1453350287396966,-1.3467809829503958]\n(9, 8) -> #1 [2.677701154444383,-1.7014448666602382,1.7306521061937417,0.17030465682185592,0.8528456599053458,0.1765851991754939,0.4179207548817727,1.242512027395022,-0.7548739880556177,-0.5870811696345914]\n(9, 9) -> #1 [2.7443566651639295,-0.43667396475945197,0.570339098949226,-0.18662339374134818,-1.0252408010241636,-0.8558004720325525,1.1626574598809774,-0.49419997530608595,-0.9532076745142369,1.1382738728981685]\n\nimport scala.math.max\nnbRowSOM: Int = 10\nnbColSOM: Int = 10\nnbIter: Int = 30\ndataNbObs: Int = 2000\ndataNbVars: Int = 10\ndataNbCls: Int = 2\ndatas: org.apache.spark.rdd.RDD[NamedVector] = MapPartitionsRDD[1] at map at <console>:139\nstartLearningTime: Long = 1497346221516\nsom: SomTrainerA = SomTrainerA@28b6b385\nsomOptions: scala.collection.immutable.Map[String,String] = Map(clustering.som.nbrow -> 10, clustering.som.nbcol -> 10)\nsomConvergeDist: Double = -0.1\nstartLearningTime: Long = 1497346221516\nmodel: AbstractModel =\n(0, 0) -> #1 [2.953232013957491,-0.2832385043692497,1.27543497802818,-0.45969137146165134,-0.3861469876640312,-0.4391357317935631,0.18729476962569291,0.4664804397639474,0.10572361505274075,0.5344941937382655]\n(0, 1) -> #0 [1.2323295083402657,1.3657272913893492,-0.380446180..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":25,"time":"Took: 21 seconds 523 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1830041141-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"8AC0D862AE2E44BB87F55C13E655D5AF"},"cell_type":"code","source":"val dim = datas.take(1)(0).toArray.length   \nval header = \"# mapDim=2 mapSize={\"+ nbRowSOM +\",\" + nbColSOM + \"}\" + \n  \" pointDim=\" + dim + \" pointRealDim=\" + dim + \" mapMin={\" + Array.fill[Byte](dim)(0).mkString(\",\") + \"}\"\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"dim: Int = 10\nheader: String = # mapDim=2 mapSize={10,10} pointDim=10 pointRealDim=10 mapMin={0,0,0,0,0,0,0,0,0,0}\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":26,"time":"Took: 1 second 374 milliseconds, at 2017-6-13 11:30"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CAE0F06E43984FB7B9E0A5C18E99DCC8"},"cell_type":"code","source":"object Output extends Serializable {\n  def addHeaderToRdd(sparkCtx: SparkContext, lines: RDD[String], header: String): RDD[String] = {\n    val headerRDD = sparkCtx.parallelize(List((-1L, header)))     // index the header with -1, so that the sort will put it on top.\n    val pairRDD = lines.zipWithIndex()\n    val pairRDD2 = pairRDD.map(t => (t._2, t._1))\n    val allRDD = pairRDD2.union(headerRDD)\n    val allSortedRDD = allRDD.sortByKey()\n    return allSortedRDD.values\n  }\n  def write(outputDir: String) {\n      val dim = datas.take(1)(0).toArray.length\n      val mapMin = Array.fill[Byte](dim)(0).mkString(\",\")\n      var header = \"# mapDim=2 mapSize={\"+ nbRowSOM +\",\" + nbColSOM + \"}\"\n      header += \" pointDim=\" + dim + \" pointRealDim=\" + dim + \" mapMin={\" + mapMin + \"}\"\n    \n      val prototypes = model.prototypes.map(d => d._point)\n      println(\"Write Prototypes...\")\n      val protosString = sc.parallelize(prototypes).map(d => d.toArray.mkString(\",\"))\n      val protosResult = addHeaderToRdd(sc, protosString, header)\n      protosResult.coalesce(1).saveAsTextFile(outputDir+\"/protos\")\n\n      val sumAffectedDatas = datas.map(d => (model.findClosestPrototype(d).id, 1))\n        .reduceByKey{case (sum1, sum2) => sum1+sum2}\n        .collectAsMap() \n      val card = (0 to prototypes.length - 1).map(d => {\n        if (sumAffectedDatas.contains(d)) {\n          sumAffectedDatas(d)\n        } else {\n          0\n        }\n      })\n      println(\"Write Cardinalities...\")\n      var cardHeader = \"# mapDim=2 mapSize={\"+ nbRowSOM +\",\" + nbColSOM + \"}\" \n      cardHeader +=  \"pointDim=1 pointRealDim=0 mapMin={0} mapMax={0}\"\n      val cardRdd = sc.parallelize(card).map(d => \"\" + d)\n      val cardResult = addHeaderToRdd(sc, cardRdd, cardHeader)\n      cardResult.coalesce(1).saveAsTextFile(outputDir+\"/cards\")\n      \n    \n      val affHeader = \"# mapDim=1 mapSize={\" + datas.count() + \"} pointDim=1 pointRealDim=0 mapMin={0} mapMax={0}\"\n      val aff = datas.map(d => model.findClosestPrototype(d).id + \"\")\n      val affResult = addHeaderToRdd(sc, aff, affHeader)\n      println(\"Write Affiliate...\")\n      affResult.coalesce(1).saveAsTextFile(outputDir+\"/affs\")\n    \n      println(\"Write Maps...\")\n      val maps = sc.parallelize(prototypes.zip(card)).map(d => d._1.toArray.mkString(\",\") + \",\" + d._2)\n        .coalesce(1).saveAsTextFile(outputDir+\"/maps\")\n      println(\"Write successfully...\")\n  }\n}\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined object Output\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":36,"time":"Took: 4 seconds 799 milliseconds, at 2017-6-13 11:58"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"81F586E364D7424B8BE69DDEB406C36D"},"cell_type":"code","source":"val outputDir = \"/Users/caoquan/output\"\nOutput.write(outputDir)","outputs":[{"name":"stdout","output_type":"stream","text":"Write Prototypes...\nWrite Cardinalities...\nWrite Affiliate...\nWrite Maps...\nWrite successfully...\noutputDir: String = /Users/caoquan/output\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":37,"time":"Took: 10 seconds 217 milliseconds, at 2017-6-13 11:58"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CF974265B6D5481E87519BE77BCE0E2E"},"cell_type":"code","source":"","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":29,"time":"Took: 1 second 382 milliseconds, at 2017-6-13 11:30"}]}],"nbformat":4}