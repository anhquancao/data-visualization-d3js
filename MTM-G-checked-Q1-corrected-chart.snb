{"metadata":{"name":"MTM-G-checked-Q1","user_save_timestamp":"1190-11-11T11:00:00.000Z","auto_save_timestamp":"19719700-11-11T11:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":"/tmp/repo","customRepos":["spartakus % default % http://dl.bintray.com/spark-clustering-notebook/maven % maven"],"customDeps":["com.github.haifengl % smile-scala_2.11 % 1.1.0"],"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"38E10839E2FA41C186CACE6E1DA0C58C"},"cell_type":"code","source":"import smile._\nimport smile.io._\nimport smile.util._\nimport smile.math._, Math._\nimport smile.math.distance._\nimport smile.math.kernel._\nimport smile.math.matrix._\nimport smile.stat.distribution._\nimport smile.data._\nimport smile.interpolation._\nimport smile.validation._\nimport smile.association._\nimport smile.regression._\nimport smile.classification._\nimport smile.feature._\nimport smile.clustering._\nimport smile.vq._\nimport smile.manifold._\nimport smile.mds._\nimport smile.sequence._\nimport smile.projection._\nimport smile.nlp._\nimport smile.plot._\nimport java.awt.Color\nimport smile.wavelet._\n// import smile.shell._\n","outputs":[{"name":"stdout","output_type":"stream","text":"import smile._\nimport smile.io._\nimport smile.util._\nimport smile.math._\nimport Math._\nimport smile.math.distance._\nimport smile.math.kernel._\nimport smile.math.matrix._\nimport smile.stat.distribution._\nimport smile.data._\nimport smile.interpolation._\nimport smile.validation._\nimport smile.association._\nimport smile.regression._\nimport smile.classification._\nimport smile.feature._\nimport smile.clustering._\nimport smile.vq._\nimport smile.manifold._\nimport smile.mds._\nimport smile.sequence._\nimport smile.projection._\nimport smile.nlp._\nimport smile.plot._\nimport java.awt.Color\nimport smile.wavelet._\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":1,"time":"Took: 12 seconds 290 milliseconds, at 2017-6-14 17:15"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"9265623F82D44A268E1C72C4FD7F48B6"},"cell_type":"code","source":":markdown\n#NamedVector.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res2: String = #NamedVector.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line22.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line22.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":2,"time":"Took: 9 seconds 798 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2B8FFFF2610F40BA873138C331219D3E"},"cell_type":"code","source":"\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\n//import org.apache.spark.util.Vector\nimport org.apache.spark.mllib.linalg.DenseVector\n//import org.apache.spark.ml.linalg.{Vector, Vectors}\n//import org.apache.spark.mllib.linalg.{Vectors, Vector}\n//package org.lipn.som.global\n\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\n//import org.apache.spark.util.Vector\nimport scala.concurrent.duration.{FiniteDuration, Duration}\n//import org.lipn.som.som.pointObj\nimport org.apache.spark.util\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.DenseVector\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\nimport org.apache.spark.util\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":3,"time":"Took: 7 seconds 875 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"7128594164A24452A9A28D1190CCB97D"},"cell_type":"code","source":"//package org.lipn.som.utils\n\n//import org.apache.spark.ml.linalg.{Vector, Vectors}\nimport org.apache.spark.mllib.linalg.DenseVector\n\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 27/03/13\n * Time: 17:07\n * To change this template use File | Settings | File Templates.\n */\nclass NamedVector(elements: Array[Double], val cls: Int) extends DenseVector(elements) with Serializable {\n  override def toString(): String = {\n    \"#\"+cls+\" \"+super.toString()\n  }\n  def toJSON(clusterId: Int): String = {\n    var str = new StringBuilder\n    str append \"{\"\n    for (i <- 0 until elements.length) {\n      str append \"attr\"+i+\":\"+elements(i)+\", \"\n    }\n    str append \"cls:\\\"\"+cls+\"\\\", \"\n    str append \"clusterId:\"+clusterId\n    str append \"}\\n\"\n    str.toString()\n  }\n}","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\ndefined class NamedVector\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":4,"time":"Took: 5 seconds 853 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"2736AD3B4D7749D886A123CA1D209170"},"cell_type":"code","source":":markdown\n#Matrix.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res6: String = #Matrix.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line28.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line28.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":5,"time":"Took: 9 seconds 148 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"7CDF2C41EAC5425782484B5FC1B9D70B"},"cell_type":"code","source":"//package org.lipn.som.utils\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 27/03/13\n * Time: 19:10\n * To change this template use File | Settings | File Templates.\n */\nclass Matrix(val elements: Array[Array[Double]]) extends Serializable {\n  //def this(nbRow: Int, nbCol: Int) = this(Array.tabulate(nbRow, nbCol){case (r, c) => r+c})\n  def this(nbElements: Int, initValue: Double) = this(Array.fill(nbElements, nbElements)(initValue))\n\n  def fillRow(row: Int, value: Double) = {elements(row) = Array.fill(elements.length)(value)}\n  def apply(row: Int, col: Int):Double = elements(row)(col)\n\n  def addel(row: Int, col: Int, value: Double) {elements(row)(col) += value}\n\n  def += (other: Matrix): Matrix = {\n    //todo: add length check\n    //if (length != other.length)\n    //  throw new IllegalArgumentException(\"Matrix of different length\")\n    var ans = 0.0\n    var i = 0\n    for (i <- 0 until elements.length) {\n      for (j <- 0 until elements(i).length) {\n        elements(i)(j) += other.elements(i)(j)\n      }\n    }\n    this\n  }\n\n  def /= (other: Matrix): Matrix = {\n    //todo: add length check\n    //if (length != other.length)\n    //  throw new IllegalArgumentException(\"Matrix of different length\")\n    var ans = 0.0\n    var i = 0\n    for (i <- 0 until elements.length) {\n      for (j <- 0 until elements(i).length) {\n        if (other.elements(i)(j) == 0) elements(i)(j) /= Double.MinPositiveValue\n        else elements(i)(j) /= other.elements(i)(j)\n      }\n    }\n    this\n  }\n\n  /*def strRow(rowId: Int): String = {\n    var first = true\n\n    var str = new StringBuilder()\n    str append \"[\"\n    for (x <- elements(rowId)) {\n      if (first) {\n        first = false\n      }\n      else {\n        str append \", \"\n      }\n      str append x\n    }\n    str append \"]\"\n    str.toString()\n  }\n\n  def strCol(colId: Int): String = {\n    var first = true\n\n    var str = new StringBuilder()\n    str append \"[\"\n    for (row <- elements) {\n      if (first) {\n        str append row(colId)\n        first = false\n      }\n      else {\n        str append \", \"\n        str append row(colId)\n      }\n    }\n    str append \"]\"\n    str.toString()\n  }*/\n\n  //override def toString = elements.mkString(\"|\", \" | \", \"|\")\n  override def toString: String = {\n    val str = new StringBuilder()\n    for (row <- elements) {\n      for (elem <- row) {\n        str.append(\" |\").append(\"%.2f\".format(elem))\n      }\n      str.append(\"|\\n\")\n    //elements.foreach{r =>\n      //str append row.mkString(\"|\", \" | \", \"|\")+\"\\n\"\n    }\n    str.toString()\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined class Matrix\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":6,"time":"Took: 7 seconds 456 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"87E58274AD6345E4B90AF097F294602F"},"cell_type":"code","source":":markdown\n#IO.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res9: String = #IO.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line32.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line32.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":7,"time":"Took: 9 seconds 15 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B842BCF3F492457B8A762B8B3CB174CC"},"cell_type":"code","source":"//package org.lipn.som.utils\n\nimport java.io.File\n\n/**\n * Company : Altic - LIPN\n * User: Tugdual Sarazin\n * Date: 06/06/14\n * Time: 11:48\n */\nobject IO {\n\n  /** Deletes each file or directory (recursively) in `files`.*/\n  def delete(files: Iterable[File]): Unit = files.foreach(delete)\n\n  /** Deletes `file`, recursively if it is a directory. */\n  def delete(file: File)\n  {\n      val deleted = file.delete()\n      if(!deleted && file.isDirectory)\n      {\n        delete(listFiles(file))\n        file.delete\n      }\n  }\n\n  /** Returns the children of directory `dir` that match `filter` in a non-null array.*/\n  def listFiles(filter: java.io.FileFilter)(dir: File): Array[File] = wrapNull(dir.listFiles(filter))\n\n  /** Returns the children of directory `dir` that match `filter` in a non-null array.*/\n  def listFiles(dir: File, filter: java.io.FileFilter): Array[File] = wrapNull(dir.listFiles(filter))\n\n  /** Returns the children of directory `dir` in a non-null array.*/\n  def listFiles(dir: File): Array[File] = wrapNull(dir.listFiles())\n\n  private def wrapNull(a: Array[File]) =\n    if(a == null)\n      new Array[File](0)\n    else\n      a\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import java.io.File\ndefined object IO\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":8,"time":"Took: 8 seconds 486 milliseconds, at 2017-6-14 17:16"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"328A3B91F45A4B65AFB7357CD85B9A6D"},"cell_type":"code","source":"//package org.lipn.som.utils\n\nimport org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\n\n/**\n * Company : Altic - LIPN\n * User: Tugdual Sarazin\n * Date: 07/01/14\n * Time: 12:37\n */\nobject SparkReader {\n  def parse(sc: SparkContext, filePath: String, splitRegex: String): RDD[NamedVector] = {\n    sc.textFile(filePath).map{line =>\n      val arrayDouble = line.split(splitRegex).map(_.toDouble)\n      new NamedVector(arrayDouble.dropRight(1), arrayDouble.last.toInt)\n    }\n  }\n}","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\ndefined object SparkReader\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":9,"time":"Took: 10 seconds 203 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F39D6EFB33AF498D8AE47212D8D7CB83"},"cell_type":"code","source":":markdown\nSparkReader.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res13: String = SparkReader.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line38.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line38.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":10,"time":"Took: 7 seconds 468 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B29DB159843A4CA685233DC832AB8E1B"},"cell_type":"code","source":":markdown\n#NmiMetric.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res15: String = #NmiMetric.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line40.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line40.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":11,"time":"Took: 10 seconds 352 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B5027B8CE462421B85E62425AC56ADC8"},"cell_type":"code","source":"//package org.lipn.som.utils\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 24/05/13\n * Time: 19:02\n * To change this template use File | Settings | File Templates.\n */\n//object NmiMetric extends App {\nobject NmiMetric {\n  def jointProbabilty(x: Array[Int], y: Array[Int]) {\n\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined object NmiMetric\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":12,"time":"Took: 9 seconds 672 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"EC59E17DA3FD4582857637194E20BFBE"},"cell_type":"code","source":":markdown\n#AbstractPrototype.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res18: String = #AbstractPrototype.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line44.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line44.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":13,"time":"Took: 6 seconds 117 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"74AF2500F11D4470B975946BAAEE9254"},"cell_type":"code","source":"//package org.lipn.som.global\nimport org.apache.spark.mllib.linalg.{Vectors, Vector, DenseVector}\n\n//import org.apache.spark.util\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 14/06/13\n * Time: 12:42\n * To change this template use File | Settings | File Templates.\n */\nabstract class AbstractPrototype(val id: Int, var _point: DenseVector) extends Serializable {\n  def update(newPoint: DenseVector): Double = {\n //   val dist = _point.dist(newPoint)\n  val dist = Vectors.sqdist(_point, newPoint)\n\n    _point = newPoint\n    dist\n  }\n\n // def dist(data: Vector) = _point.dist(data) // a modifier: - ajouter une pondÃ©ration fixe; - ajouter une pondÃ©ration adaptative\ndef dist(data: DenseVector) = Vectors.sqdist(_point,data) // a modifier: - ajouter une pondÃ©ration fixe; - ajouter une pondÃ©ration adaptative\n\n//def dist(prototype: AbstractPrototype) = _point.dist(prototype._point)\ndef dist(prototype: AbstractPrototype) = Vectors.sqdist(_point,prototype._point)\n  \n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.{Vectors, Vector, DenseVector}\ndefined class AbstractPrototype\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":14,"time":"Took: 4 seconds 764 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0BD5BA82938F41DD8C42AECAD28ED107"},"cell_type":"code","source":":markdown \n#AbstractModel.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res21: String = #AbstractModel.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line48.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line48.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":15,"time":"Took: 6 seconds 42 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"D5C2612F7811426C94AD8C33103A6B51"},"cell_type":"code","source":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.DenseVector\n\n//import org.apache.spark.ml.linalg.{Vector,Vectors}\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 14/06/13\n * Time: 12:34\n * To change this template use File | Settings | File Templates.\n */\n\n class pointObj(\n    val data: DenseVector,//the numeric part of the data-point\n    //val label: Int,            //the real (provided) label\n    val id: Int               //the identifier(=numeroLigne) of the data-point\n    ) extends Serializable {\n  override def toString: String = {\" \"\n    //data.toArray.deep.mkString(\", \") + pointPartBin.toArray.deep.mkString(\", \")\n    /*\"partieNumerique -> \"+pointPartNum.toArray.deep.mkString(\"[\", \", \", \"]\") +\n    \"; partieBinaire -> \"+pointPartBin.toArray.deep.mkString(\"[\", \", \", \"]\")*/ \n  } \n }\n \n\nabstract class AbstractModel(val prototypes: Array[AbstractPrototype]) extends Serializable {\n  def size = prototypes.size\n\n  def findClosestPrototype(data: DenseVector): AbstractPrototype = {\n    prototypes.minBy(proto => proto.dist(data))\n  }\n  \n  def findClosestPrototypeId(data: DenseVector): AbstractPrototype = {\n    prototypes.minBy(proto => proto.dist(data))\n  }  \n\n  def apply(i: Int) = prototypes(i)\n\n  def assign(dataset: RDD[pointObj]): RDD[(Int, Int)] =  {\n    dataset.map(d => (this.findClosestPrototype(d.data).id, d.id))\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.DenseVector\ndefined class pointObj\ndefined class AbstractModel\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":16,"time":"Took: 5 seconds 164 milliseconds, at 2017-6-14 17:17"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F5437D9C9BB94F9CA5F35AAF31ACC465"},"cell_type":"code","source":":markdown\n#WriterCluster.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res24: String = #WriterCluster.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line52.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line52.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":17,"time":"Took: 9 seconds 309 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B373C55A978C48938C66A7E045AF1AB3"},"cell_type":"code","source":"//package org.lipn.som.utils\nimport org.apache.spark.mllib.linalg.DenseVector\nimport java.io._\nimport org.apache.spark.rdd.RDD\n//import org.lipn.som.global.AbstractModel\n\n\nobject WriterClusters {\n  def js(data: RDD[NamedVector], model: AbstractModel, path: String) = {\n    val writer = new PrintWriter(new File(path))\n\n    val dataArray = data.collect\n    var str = \"var dataset = [\"\n\n    dataArray.foreach {d =>\n      val closestNeuron = model.findClosestPrototype(d)\n      if (d != dataArray.head) str += ','\n      str += d.toJSON(closestNeuron.id)\n    }\n\n    /*model.foreach{proto =>\n      str += ','\n      str += \"{\"\n      for (i <- 0 until proto._point.length) {\n        str += \"attr\"+i+\":\"+proto._point(i)+\", \"\n      }\n      str += \"cls:\\\"proto\\\", \"\n      str += \"clusterId:-\"+proto.id\n      str += \"}\\n\"\n    }\n    */\n    str += \"];\"\n    writer.write(str)\n\n    writer.close()\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\nimport java.io._\nimport org.apache.spark.rdd.RDD\ndefined object WriterClusters\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":18,"time":"Took: 9 seconds 7 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"3F31F7F976564E849122CA88BA83B218"},"cell_type":"code","source":":markdown \n#AbstractTrainer.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res27: String = #AbstractTrainer.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line56.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line56.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":19,"time":"Took: 7 seconds 440 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0533032DC3BF449796B196D35705E2ED"},"cell_type":"code","source":"/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 14/06/13\n * Time: 12:31\n * To change this template use File | Settings | File Templates.\n */\n\nimport org.apache.spark.mllib.linalg.DenseVector\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\n//import org.apache.spark.ml.linalg.{Vector,Vectors}\n\ntrait AbstractTrainer extends Serializable {\n  private var _it = 0\n  def getLastIt = _it\n\n  private var _converge = 1.0\n  def getLastConvergence = _converge\n\n  private var _trainingDuration = Duration.Zero\n  def getLastTrainingDuration = _trainingDuration\n\n  protected def initModel(dataset: RDD[DenseVector], modelOptions: Map[String, String])\n\n  protected def trainingIteration(dataset: RDD[DenseVector], currentIteration: Int, maxIteration: Int): Double\n\n  protected def getModel: AbstractModel\n\n  final def training(dataset: RDD[DenseVector],\n                     modelOptions: Map[String, String] = Map.empty,\n                     maxIteration: Int = 100,\n                     endConvergeDistance: Double = 0.001): AbstractModel = {\n\n    val datasetSize = dataset.count()\n\n    val startLearningTime = System.currentTimeMillis()\n\n    val model = initModel(dataset, modelOptions)\n    _it = 0\n    _converge = 1.0\n\n    while (_converge > endConvergeDistance && _it < maxIteration) {\n\n      // Training iteration\n      val sumConvergence = trainingIteration(dataset, _it, maxIteration)\n\n      // process convergence\n      _converge = sumConvergence / datasetSize\n      _it += 1\n    }\n\n    _trainingDuration = Duration.create(System.currentTimeMillis() - startLearningTime, MILLISECONDS)\nprintln(\"le model apres training est : \"+getModel)\n\n    // return the model\n    getModel\n  }\n}\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\nimport java.util.concurrent.TimeUnit._\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\ndefined trait AbstractTrainer\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":20,"time":"Took: 8 seconds 749 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"4AC18190D25842648090D447EC6D777A"},"cell_type":"code","source":":markdown\n#SomTrainerA.scala","outputs":[{"name":"stdout","output_type":"stream","text":"res30: String = #SomTrainerA.scala\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line60.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line60.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":21,"time":"Took: 10 seconds 63 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6996406D601D42538560B9C882D6B797"},"cell_type":"code","source":"//package org.lipn.som.som\n\nimport scala.math.{abs, exp}\nimport java.util.Random\nimport org.apache.spark.rdd.RDD\n//import org.apache.spark.SparkContext._\n//import org.apache.spark.util.Vector\n//import org.lipn.som.global.{AbstractPrototype, AbstractModel, AbstractTrainer}\n//import org.lipn.som.utils.NamedVector\nimport scala.concurrent.duration.{FiniteDuration, Duration}\n//import org.apache.spark.ml.linalg.{Vector,Vectors}\nimport org.apache.spark.mllib.linalg.DenseVector\n\n/**\n * User: tug\n * Date: 14/06/13\n * Time: 12:35\n */\nclass SomTrainerA extends AbstractTrainer {\n  val DEFAULT_SOM_ROW = 10\n  val DEFAULT_SOM_COL = 10\n  val DEFAULT_TMAX = 8\n  val DEFAULT_TMIN = 1\n  val DEFAULT_INITMAP = 0\n  val DEFAULT_INITMAPFile = \"\"\n  val DEFAULT_SEPARATOR = \"\"\n  val SIZE_REAL_VARS = 10\n  \n  var tmax: Double = DEFAULT_TMAX\n  var tmin: Double = DEFAULT_TMIN\n  var initMap: Int = DEFAULT_INITMAP\n  var initMapFile: String = DEFAULT_INITMAPFile\n  var sep = DEFAULT_SEPARATOR\n  var sizeRealVars: Int = SIZE_REAL_VARS\n \n\n  protected var _somModel: SomModel = null\n  protected def getModel: AbstractModel = _somModel\n\n  protected def initModel(dataset: RDD[DenseVector], modelOptions: Map[String, String]) {\n    var nbRow = DEFAULT_SOM_ROW\n    var nbCol = DEFAULT_SOM_COL\n    if (modelOptions != null) {\n      nbRow = modelOptions(\"clustering.som.nbrow\").toInt\n      nbCol = modelOptions(\"clustering.som.nbcol\").toInt\n      tmax = modelOptions.get(\"clustering.som.tmax\").map(_.toDouble).getOrElse(DEFAULT_TMAX)\n      tmin = modelOptions.get(\"clustering.som.tmin\").map(_.toDouble).getOrElse(DEFAULT_TMIN)\n      initMap = modelOptions.get(\"clustering.som.initMap\").map(_.toInt).getOrElse(DEFAULT_INITMAP)\n      initMapFile = modelOptions.get(\"clustering.som.initMapFile\").map(_.toString).getOrElse(DEFAULT_INITMAPFile)\n      sep = modelOptions.get(\"clustering.som.separator\").map(_.toString).getOrElse(DEFAULT_SEPARATOR)\n      sizeRealVars = modelOptions.get(\"clustering.som.nbRealVars\").map(_.toInt).getOrElse(SIZE_REAL_VARS)\n    }\n\n    val mapSize = nbRow * nbCol\n    // todo : replace random = 42\n    var selectedDatas: Array[DenseVector] = Array()\n    if (initMap == 0) {    \n       selectedDatas = {\n      dataset.takeSample(withReplacement = false, mapSize, new Random().nextInt())\n    }\n    } else {\n       selectedDatas = {\n        scala.io.Source.fromFile(initMapFile).getLines().toArray.map(x => new DenseVector(x.split(sep).map(_.toDouble)))\n      }\n    }\n\n    // todo : Check /nbCol et %nbCOl\n    val neuronMatrix = Array.tabulate(mapSize)(id => new SomNeuron(id, id/nbCol, id%nbCol, selectedDatas(id)))\n    _somModel = new SomModel(nbRow, nbCol, neuronMatrix)\n  }//init model\n\n  protected def trainingIteration(dataset: RDD[DenseVector], currentIteration: Int, maxIteration: Int): Double = {\n    \n    val T = processT(maxIteration, currentIteration)\n\n    // create som observations\n    val mapping = dataset.map{d =>\n      val bestNeuron = _somModel.findClosestPrototype(d).asInstanceOf[SomNeuron]\n      \n      //ML: à rentrer dans la condition\n      var mapBin: scala.collection.immutable.Vector[(Int, Int)] = scala.collection.immutable.Vector()\n      \n      //binary part\n      if (d.size > this.sizeRealVars){\n        val d2: scala.collection.immutable.Vector[Double] = d.toArray.drop(sizeRealVars).toVector.asInstanceOf[scala.collection.immutable.Vector[Double]]\n        mapBin = d2.map(x => if (x == 1) (1,0) else (0,1))\n      }\n\n\n      _somModel.prototypes.map{proto =>\n        val neuron = proto.asInstanceOf[SomNeuron]\n        val factor = neuron.factorDist(bestNeuron, T) // K(delta(.-.)/T)\n             \n        //binary part\n        var mapBinPondere: scala.collection.immutable.Vector[(Double, Double)] = scala.collection.immutable.Vector()\n       \n        //ML:ajouter la condition (d.length > this.sizeRealVars), sinon vecteur vide\n        if (mapBin.size > 0) {\n          mapBinPondere = mapBin.map(x => (x._1 * factor, x._2 * factor))\n        }\n        \n        //ML: dans le cas de non présence de réelle vecteur vide, pareil pour les varibales binaires\n        new SomObsA(new DenseVector(d.toArray.take(sizeRealVars).map(_ * factor)), factor, mapBinPondere, neuron.id)\n        // ligne originale\n        //new SomObsA(Vector(d.toArray.take(sizeRealVars)) * factor, factor, mapBinPondere, neuron.id)\n\n      }\n    } //end mapping\n\n    // Concat observations\n    val concatObs = mapping.reduce{(obs1, obs2) =>\n      for (i <- 0 until obs1.length) {\n        obs1(i) += obs2(i)\n      }\n      obs1\n    }\n\n    // Update model and process convergence distance\n    //val x: Array[Double] = concatObs.map(_somModel.update)\n    concatObs.map(_somModel.update).sum\n    \n  }//end trainingIteration\n\n  //protected def processT(maxIt:Int, currentIt:Int) = maxIt.toFloat - currentIt\n   protected def processT(maxIt:Int, currentIt:Int) =\n      this.tmax*math.pow(this.tmin/this.tmax,currentIt/(maxIt.toFloat-1))\n\n  protected class SomModel(val nbRow: Int, val nbCol: Int, neurons: Array[SomNeuron])\n    extends AbstractModel(neurons.asInstanceOf[Array[AbstractPrototype]]) {\n\n    // Update the data point of the neuron\n    // and return the distance between the new and the old point\n    def update(obs: SomObsA) = neurons(obs.neuronId).update(obs.compute)\n\n\n    override def toString: String = {\n      var str = \"\"\n      for(neuron <- neurons) {\n        str += neuron+\"\\n\"\n      }\n      str\n    }\n  }\n\n  protected class SomNeuron(id: Int, val row: Int, val col: Int, point: DenseVector) extends AbstractPrototype(id, point) {\n    def factorDist(neuron: SomNeuron, T: Double): Double = {\n      exp(-(abs(neuron.row - row) + abs(neuron.col - col)) / T)\n    }\n\n    override def toString: String = {\n      \"(\"+row+\", \"+col+\") -> \"+point\n    }\n  }\n\n  protected class SomObsA(var numerator:DenseVector, var denominator: Double, var mapBinPonderation: scala.collection.immutable.Vector[(Double, Double)], val neuronId: Int) extends Serializable {\n    def +(obs: SomObsA): SomObsA = {\n      //ML:que lorsqu'on a des données réelles\n      numerator = new DenseVector( obs.numerator.toArray.zip(numerator.toArray).map( x => x._1 + x._2 ) )\n      denominator += obs.denominator\n      \n\n      // calcul de la somme des pondÃ©ration des 1 et des 0\n     //ML:ajouter la condition (d.length > this.sizeRealVars)\n      \n      var mapBinPonderation2: scala.collection.immutable.Vector[(Double, Double)] = scala.collection.immutable.Vector()\n    if (mapBinPonderation.size>0)\n      {\n      for (i <-0 until mapBinPonderation.size){\n        val c1: Double = mapBinPonderation(i)._1 + obs.mapBinPonderation(i)._1\n        val c0: Double = mapBinPonderation(i)._2 + obs.mapBinPonderation(i)._2\n         mapBinPonderation2==mapBinPonderation2 :+ (c1, c0)\n      }\n      mapBinPonderation = mapBinPonderation2\n    }\n      \n      this\n    }\n\n    //def compute = numerator / denominator\n    def compute = {\n      // Linge originale\n      //val newPointsReal = numerator / denominator\n      val newPointsReal = new DenseVector( numerator.toArray.map(_ / denominator) )\n      \n      // calcul de la mediane\n      //ML:ajouter la condition (d.length > this.sizeRealVars)\n      //var newPointsBin:Array[Double]=Array()\n      \n      var newPointsBin: scala.collection.immutable.Vector[Double] = scala.collection.immutable.Vector()\n      \n      if (mapBinPonderation.size>0)\n      {\n        newPointsBin = mapBinPonderation.map {e =>\n        if (e._1 >= e._2) 1.0 else 0.0}\n      }\n     \n      // concatenation de la partie real et binaire\n      new DenseVector(newPointsReal.toArray ++ newPointsBin) \n       \n    }\n\n    override def toString = numerator.toString()+\" : \"+denominator.toString\n  }//end SomObsA\n\n\n\n  def purity(dataset: RDD[NamedVector]): Double = {\n    //val nbRealClass = dataset.map(_.cls).reduce(case(cls1,cls2))\n\n    val sumAffectedDatas = dataset.map(d => ((_somModel.findClosestPrototype(d).id, d.cls), 1))\n      .reduceByKey{case (sum1, sum2) => sum1+sum2}\n\n    val maxByCluster = sumAffectedDatas.map(sa => (sa._1._1, sa._2))\n      .reduceByKey{case (sum1, sum2) => sum1.max(sum2) }\n      .map(_._2)\n      .collect()\n\n    maxByCluster.sum / dataset.count().toDouble\n  }\n\n  def affectations(dataset: RDD[NamedVector]): RDD[(Int, Int)] = {\n    dataset.map(d => (d.cls, _somModel.findClosestPrototype(d).id))\n  }\n} //end SomTrainerA\n\n class pointObj(\n    val data: DenseVector,//the numeric part of the data-point\n    //val label: Int,            //the real (provided) label\n    val id: Int               //the identifier(=numeroLigne) of the data-point\n    ) extends Serializable {\n  override def toString: String = {\" \"\n    //data.toArray.deep.mkString(\", \") + pointPartBin.toArray.deep.mkString(\", \")\n    /*\"partieNumerique -> \"+pointPartNum.toArray.deep.mkString(\"[\", \", \", \"]\") +\n    \"; partieBinaire -> \"+pointPartBin.toArray.deep.mkString(\"[\", \", \", \"]\")*/ \n  } \n }\n \n","outputs":[{"name":"stdout","output_type":"stream","text":"import scala.math.{abs, exp}\nimport java.util.Random\nimport org.apache.spark.rdd.RDD\nimport scala.concurrent.duration.{FiniteDuration, Duration}\nimport org.apache.spark.mllib.linalg.DenseVector\ndefined class SomTrainerA\ndefined class pointObj\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":22,"time":"Took: 10 seconds 364 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"id":"0D9943E8FC48402083C7B5541F4AFD3A"},"cell_type":"markdown","source":"#DataGen"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C7147CCF43F941E787B71C1AD888EF40"},"cell_type":"code","source":"//package org.lipn.som.utils\nimport org.apache.spark.mllib.linalg.DenseVector\n\n//import util.Random\n//import org.apache.spark.util.Vector\n//import org.apache.spark.SparkContext\nimport org.apache.spark.rdd.RDD\nimport scala.Array\n\n\n/**\n * Created with IntelliJ IDEA.\n * User: tug\n * Date: 27/03/13\n * Time: 17:07\n * To change this template use File | Settings | File Templates.\n */\nobject DataGen extends Serializable {\n\n  class Center(val cls: Int, val rayon: Double, val elements: Array[Double]) extends Serializable {\n    def this(cls: Int, dims: Int, a: Double, b: Double, rayon: Double) = this(cls, rayon, Array.fill(dims)(new Random(42).nextGaussian() * a + b))\n  }\n\n\n  def generate(sc: SparkContext,\n                        numPoints: Int,\n                        nbCls: Int,\n                        d: Int,\n                        numPartitions: Int = 2): RDD[NamedVector] =\n  {\n    // First, generate some centers\n    val rand = new Random(42)\n    val r = 1.0\n    val centers = Array.fill(nbCls)(Array.fill(d)(rand.nextGaussian() * r))\n    // Then generate points around each center\n    sc.parallelize(0 until numPoints, numPartitions).map{ idx =>\n      val cls = idx % nbCls\n      val center = centers(cls)\n      val rand2 = new Random(42 + idx)\n      new NamedVector(Array.tabulate(d)(i => center(i) + rand2.nextGaussian()), cls)\n    }\n  }\n}\n\nobject DataGenerator extends Serializable {\n  private val rand = new Random\n\n  private case class DModel(A: Double, B: Double) {\n    def gen =  A * rand.nextDouble() + B\n  }\n\n  private case class PModel(cls: Int, dmodels: Array[DModel]) {\n    def genVector = new DenseVector(dmodels.map(_.gen))\n    def genNamedVector = new NamedVector(dmodels.map(_.gen), cls)\n  }\n\n  private def PModel2D(cls: Int, A: Double, B: Double, C: Double) = PModel(cls, Array(DModel(A, B), DModel(A, C)))\n\n  private def PModelND(cls: Int, dims: Int, A: Double, B: Double) = PModel(cls, Array.fill(dims)(DModel(A, B)))\n\n  class SModel(N: Int, pmodels: Array[PModel]) {\n    private def nextVector(i: Int) = pmodels(rand.nextInt(pmodels.size)).genVector\n    private def nextNamedVector(i: Int) = pmodels(rand.nextInt(pmodels.size)).genNamedVector\n    def getVector = Array.tabulate(N)(nextVector)\n    def getNamedVector = Array.tabulate(N)(nextNamedVector)\n  }\n  val CLS_1 = 1\n  val CLS_2 = 2\n  val CLS_3 = 3\n  val CLS_4 = 4\n\n  def genH2Dims(N: Int) = new SModel(N, Array(\n    PModel2D(CLS_1, 1, 1, 1),\n    PModel2D(CLS_1, 1, 1, 2),\n    PModel2D(CLS_1, 1, 1, 3),\n    PModel2D(CLS_1, 1, 2, 2),\n    PModel2D(CLS_1, 1, 3, 1),\n    PModel2D(CLS_1, 1, 3, 2),\n    PModel2D(CLS_1, 1, 3, 3)\n  ))\n\n  def gen2Cls2Dims(N: Int) = new SModel(N, Array(\n    PModel2D(CLS_1, 1, 1, 1),\n    PModel2D(CLS_2, 2, 2, 2)\n  ))\n\n  def gen2ClsNDims(N: Int, dims: Int) = new SModel(N, Array(\n    PModelND(CLS_1, dims, 1, 1),\n    PModelND(CLS_2, dims, 2, 2)\n  ))\n}\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.linalg.DenseVector\nimport org.apache.spark.rdd.RDD\nimport scala.Array\ndefined object DataGen\ndefined object DataGenerator\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":23,"time":"Took: 10 seconds 875 milliseconds, at 2017-6-14 17:18"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"E73522D116E34C998FBAFC211BD34F1B"},"cell_type":"code","source":":markdown\n# main with generated data","outputs":[{"name":"stdout","output_type":"stream","text":"res34: String = # main with generated data\n"},{"metadata":{},"data":{"text/markdown":"<span style=\"color:red;\">Ooops, exception in the cell: $line66.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line66.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":24,"time":"Took: 9 seconds 659 milliseconds, at 2017-6-14 17:19"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"4169DCF0BBD34B898E5D688BDE5D8774"},"cell_type":"code","source":" import scala.math.max\n  val nbRowSOM = 10\n  val nbColSOM = 10\n  val nbIter = 30\n  val dataNbObs = 2000\n  val dataNbVars = 10\n  val dataNbCls = 2 //classes\n  val datas = DataGen.generate(sc, dataNbObs, dataNbCls, dataNbVars, max(dataNbObs/10000, 1))\n  datas.cache()\n  datas.count()\n  var startLearningTime = System.currentTimeMillis()\n\n println(\"****************\\n***** SOM  *****\\n****************\")\n  val som = new SomTrainerA\n  val somOptions = Map(\"clustering.som.nbrow\" -> nbRowSOM.toString, \"clustering.som.nbcol\" -> nbColSOM.toString)\n  val somConvergeDist = -0.1\n  startLearningTime = System.currentTimeMillis()\n  val model = som.training(datas.asInstanceOf[RDD[DenseVector]], somOptions, nbIter, somConvergeDist)\n  val somDuration = Duration(System.currentTimeMillis() - startLearningTime, MILLISECONDS)\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"****************\n***** SOM  *****\n****************\nle model apres training est : (0, 0) -> #0 [2.3241138609108276,0.11977313312704185,-0.7848463553072589,-1.965769806434134,0.6270093202770837,2.2671670755575626,-1.5586886120416685,-0.48463287775569674,0.98286090523545,1.1482032319423692]\n(0, 1) -> #1 [2.626214220349222,-0.0992905800529561,1.6626677988837057,-1.5200244510790282,0.23810976780754034,0.8857034948223286,0.14285191279998588,-1.0817286196443716,-1.33556949974858,2.210559473145804]\n(0, 2) -> #1 [2.2129062605577277,1.078654444948801,1.845184646288763,0.5300272980659138,-1.1675237915891952,1.6424973098689493,-0.10715811861476054,-0.05584525212170932,-0.5214983270398043,1.9479605787184258]\n(0, 3) -> #0 [2.3517257003478274,0.18433442661508892,0.9252719967823662,-1.298837031852692,-0.5078916435813217,0.46970092498307703,-0.07673577492925387,-2.598762838314868,-0.7914765568300216,1.0696474641736313]\n(0, 4) -> #0 [3.398272011355222,0.8814081915725592,-1.4493918662294545,-1.2805798720956323,-0.5119559710264072,0.19693461523906225,-1.1292488827916378,-2.998020651759433,-0.8806653835248394,2.976218126119279]\n(0, 5) -> #1 [1.8877352037952306,1.0450699036089952,0.7567018932277888,-0.3801971725513758,-2.3879034539135193,0.6938594498726156,-1.1150140750524433,0.40707901052066986,-3.9877167707174497,1.999503931892261]\n(0, 6) -> #1 [2.547790229449385,-0.5128161453414641,1.350243607373849,-0.82495008227716,-2.125728565311128,0.31519982774057703,0.822144166407119,0.07521344439713429,-1.9689186285650293,1.2795509147348627]\n(0, 7) -> #0 [2.4294585605773316,2.639806865943891,-0.11922807261653234,-0.3545157945265923,0.7351011988530689,1.1880826480282363,-1.3842689306065088,-1.4696048324339355,0.6189685820278142,3.928395676527634]\n(0, 8) -> #0 [3.446953825426262,0.6819380459455562,-2.107755919233614,-1.6271242982676135,0.8208963365935134,-0.7555033461474241,-1.4725132047367078,-0.9726088693930482,-0.258031305666042,0.42354554467459304]\n(0, 9) -> #1 [2.186788204189294,0.5058706364517314,2.7288787779704817,-0.9705460712929945,-0.2879283153613881,-0.32712221310823547,-1.8346599506545287,-0.4039180230998404,-0.9410630581060051,-0.6847741054265348]\n(1, 0) -> #0 [1.804247327484301,-0.5614535915360518,-1.5011127502528518,-0.7085694132352327,-1.2945731665079119,1.4354000560094111,-1.350808726065883,-0.40903759146566776,0.06469288907276888,2.85516630637904]\n(1, 1) -> #0 [1.4937568315356944,0.3493105918170567,0.13624106451590268,0.03637921667813804,0.5739022427097416,-0.13522006299872302,0.17404364291729624,-2.118206677013972,1.3307889570019966,1.548200813279535]\n(1, 2) -> #1 [2.236962133089289,-1.890363837637538,2.8009040643505205,-0.6525910660002908,-2.628645098548331,-0.11307887486641671,0.1883745845247985,0.07538789488728986,-0.7776180766513536,-0.03492069637872797]\n(1, 3) -> #0 [2.1978753925853605,2.0082017960224356,-1.527115254780151,-1.6649865555478556,0.6056986768664653,0.10859262730238928,-1.8382656440861238,-1.8388215927312352,0.20335985628633202,-0.406733415296775]\n(1, 4) -> #0 [1.464686910845443,-0.2844262395188363,-0.695020724820929,-1.0347797591398802,-0.9090953700417181,1.1728176952777791,-0.32264735312207,-3.1057219252208004,2.434464966529349,1.0147969799209253]\n(1, 5) -> #0 [2.7781540761943333,0.602478991891114,-0.9066582420624631,-0.46764337311040416,-0.7297719776854448,0.9592104834771905,-0.3468668601254259,-1.3086840551500818,0.7134946103601345,1.9283796864268112]\n(1, 6) -> #0 [1.965653987326655,1.7247001854169304,-0.8147628836822158,0.22232192351126034,0.6287440211256332,1.2994206649529443,-1.0256682553768097,-2.4537540460751797,-1.8172922744069604,2.419397059962055]\n(1, 7) -> #1 [1.221349035963457,-1.1144271890224116,0.006920190072638555,0.14509110894216826,-0.6880069575003552,0.37912334897270694,-1.1820062569851104,1.0399491354278938,-1.0718508692690416,-1.605612446888507]\n(1, 8) -> #0 [1.7668103102604755,-0.11133333235808285,-1.6955177716026575,-2.9053951611993387,-0.06542851805017552,0.3927399423933784,0.48458162523751314,-1.2831209785245414,-2.0218616444273403,2.6899198479857924]\n(1, 9) -> #1 [2.683542536190444,-0.742078249590516,1.7747682453747953,0.11126272889307687,-1.2510522234212018,0.16830268985719393,-2.0831254102366747,-0.17072088303614874,-2.0027638132951084,0.2806885105325891]\n(2, 0) -> #0 [1.3710044117011275,-0.05232389602372123,0.8354505756984163,-0.651516431740024,3.2987398273607704,2.007960896474411,-0.9293263608316398,-0.608803785890789,-1.5658368778954947,0.26960591114416954]\n(2, 1) -> #1 [2.2451012485062405,-1.3202567018035034,2.8431493914647614,0.5908860141854642,-1.3275723771396097,-0.7712082904617317,-1.2250132130800644,0.7633993320235494,0.2529627294511647,-0.7067871657920524]\n(2, 2) -> #1 [1.2218007327882436,0.16888809893000306,1.9637878352234441,-0.042125909839796916,1.7131187811045954,1.0228697331435164,-1.7372359176221774,0.05078068090760801,-1.3676558831132455,-0.7918054126630831]\n(2, 3) -> #1 [1.361715366323499,-1.1230280668611194,-0.09378467295308224,-0.6272377159873267,-0.6043071382858048,-0.08476499019624933,0.9738338862473694,1.3551317354083896,-0.7029842655086517,1.2458756624047667]\n(2, 4) -> #1 [2.281115738697183,-1.3754260405765997,0.9088416875614828,-2.6662433516815716,-1.2968439332192592,0.10024455569600588,0.03751732853866763,1.3220375823461632,-3.6626541025832795,0.30646198346268927]\n(2, 5) -> #0 [1.2507402616251753,0.47443334598132747,-1.1935930932761933,-2.29073160026694,-1.4118263175623829,1.1342822784175821,-1.1167860478853677,-1.3231515050727098,1.7692697847587693,0.7396561288597526]\n(2, 6) -> #0 [2.110435486157954,2.480027686558606,-1.4889698628075538,-2.044250366862575,0.21280572249900787,1.0018836320864075,-1.8149244502018216,-1.463157703117031,-0.0744687690099466,1.9041145719232118]\n(2, 7) -> #1 [1.0502405683300657,-0.8587998259382464,0.7935794154044372,0.10635294835140263,-2.6649984542090994,0.7232603080197009,-1.7160325159989087,-2.3652066911877414,0.8899197681274533,0.44592432033933305]\n(2, 8) -> #1 [2.5477154688905483,-1.204777466860488,0.4615170348640738,0.4396755243138266,-0.98102835135476,0.03879084195306243,0.5056599855456986,-0.6741400530403847,-0.8535845929470445,1.7091118937269059]\n(2, 9) -> #0 [2.289761509112393,0.05739963496554745,-1.3653406948684261,0.680777809023831,0.24316658360948706,1.3767880612966135,-0.16530149468145228,-1.7143415818363998,-0.1412291362694428,2.478030510911058]\n(3, 0) -> #1 [1.551178873515183,0.808390584049042,1.9104020538863409,0.6341228958011567,-0.5190342626640877,-0.08602103508687065,4.665664205792952E-4,-2.0258081342137224,-1.0622804328458924,0.5083444330897564]\n(3, 1) -> #1 [1.1806934596513488,0.9917419978414103,1.24917303703478,0.7136758120131932,-1.1851369045074978,-1.0800352054680116,1.0725776304338248,0.5215304502430264,-0.26539340147549595,0.6375364021937711]\n(3, 2) -> #0 [2.2236648062161493,1.8038178317799343,-1.7117622148074751,0.8005177450384287,-1.1340425967936825,0.8683994694946064,-0.10681098205902961,-3.1664338936436085,0.45141319531878155,1.021714010444748]\n(3, 3) -> #0 [1.6650927890192884,2.0055296038556127,-0.9864007096176604,-0.21203390301447878,0.42399162231769927,1.5637282207509133,-0.41146097602121706,0.037109028129844734,0.48608143063121323,0.4309833125985052]\n(3, 4) -> #0 [1.6659881947253115,1.6660778867870087,-0.35378788528459504,-1.6629553977359506,-0.15157035722627754,-0.27280086276984994,-1.718528154014742,-1.520269540741615,-2.1035220443840763,1.065933902659109]\n(3, 5) -> #0 [1.4148942160927804,0.2394370842243324,-0.5834887146398229,0.35791670766952066,-0.5001796475716092,0.1773189546514078,-1.7580484445748708,-2.0849281495941256,-1.3848211449288563,1.7027265958429467]\n(3, 6) -> #1 [1.3934340439893678,-1.0164837211702225,0.07030653339882509,-0.4326291915683004,-0.7151550359298728,0.5736094277417754,-0.9840904551409679,0.9847435306213221,-1.7859182581182897,1.2800042948229124]\n(3, 7) -> #1 [2.317411477671559,0.8093043181514574,1.7271492547867637,-0.10893715346504873,-1.9821695938127337,2.5347697123886217,-0.43623105784766464,-0.815519738791183,-0.6762288076660453,-0.44039614769030194]\n(3, 8) -> #1 [1.2904914034975175,-0.9662641718118788,3.599847650576756,-1.1107249330412168,-1.224497238911461,-0.13153449596382272,-0.14037571878888205,-1.7357607393771903,-3.2534851068114774,0.9994752628993588]\n(3, 9) -> #0 [1.5146233142274415,-0.03103397713927669,-0.9558444549556497,-1.9908272241340765,1.6239142813719587,1.2578934803877337,-0.40045645740859964,0.7476007389345818,-0.6213831570825321,3.098129579338573]\n(4, 0) -> #1 [1.1954559291683107,0.5195405776046562,0.5899578730403147,0.40209648681366184,-2.6391817511228046,1.022491048478808,-0.5799025831903163,1.0565106189216364,-0.48240218728588624,1.0094209889166754]\n(4, 1) -> #0 [2.3217348815144687,-0.0913745053413465,-0.19570178862001864,-1.5631557897390087,1.2009517054620733,0.04224029592861611,-0.6229610473734759,-0.2827970008667793,-0.37784556660520036,3.568010843334913]\n(4, 2) -> #0 [2.2490460650378887,-0.0018378577226971782,-2.137170079791807,-2.2902171478696207,-2.1888270096814257,-1.7583475559250896,-1.0781779140679457,-0.937533173008694,-0.14941193979923015,2.7207568307734444]\n(4, 3) -> #0 [2.8610094871606897,0.02789681149030776,-1.145456276039185,1.1054450714282003,1.4607684416098197,1.2611102048124097,-1.0094235553178443,-3.2439941101149263,-1.1746997979318312,0.5522591513964309]\n(4, 4) -> #0 [2.9857932933247158,0.8198342513124783,0.24286982163681903,-0.8560543542553427,-0.4191295578270872,-0.7238194495319894,-1.0660853363062186,-1.0060710355073346,0.04861740445211449,0.6709736892763147]\n(4, 5) -> #1 [2.417275182443647,0.22476808609000448,1.3118029168242984,-0.1173953138454088,1.1396401482834388,1.3662221887675308,-0.1218120801702513,-0.24306494895455732,-0.5793832038542026,2.090906190694654]\n(4, 6) -> #0 [1.466235356323259,1.4920764948904348,-2.612195327095068,0.18892993730365282,-1.069268423328672,-0.42936078573584857,-3.0537655533502446,-1.6712908374955873,0.36853265914986266,0.6622765485119669]\n(4, 7) -> #1 [1.3735661976245637,-1.3500326732924568,1.1562538326880902,-3.9039835416023703,-1.1173439565271246,1.1930377281652433,-1.2307279092500742,0.365335169976181,0.0514804258778776,1.8638701033699765]\n(4, 8) -> #0 [1.430158094123481,1.39070206952737,-1.9906643649397173,-0.4899493058663662,-0.9270704758255524,0.9992845048971788,-0.4071503880076475,-1.5011018363244288,1.5323333784762871,1.0214930239677118]\n(4, 9) -> #1 [2.667998086301872,0.7876459521311973,0.20077702835990152,-1.294293750912494,-1.4522287166257655,-0.1812157316239535,-0.5301412273345223,-0.44612447227071794,-2.5614369246327877,-0.04255872737678901]\n(5, 0) -> #0 [2.456777966673949,1.7024302929531818,-2.1579028924319568,-0.8116186957643092,1.517393210189218,-1.69536736491213,0.23609760498739962,-2.91033961237925,1.7685502231038444,3.0559351607541876]\n(5, 1) -> #0 [2.48175525945995,-0.35037106948971874,-3.3946247318303,-1.3637775622438433,-0.771393470284605,-0.2706649602650728,-1.3267669964674256,-1.0513989107045085,1.4327318089724124,0.6241119651759017]\n(5, 2) -> #1 [3.0803983508661332,-1.1661035157855306,1.1648268109518414,-1.8122558945482699,-4.199862234847865,-0.8102993111965886,-1.4263544838121467,2.890866751866482,-1.3696573455708292,-0.4982231338326684]\n(5, 3) -> #1 [1.8238328418587648,0.8936161655820233,3.27419342703161,-1.3471249887798167,-1.3105816304440778,-0.1821996913046688,-2.236559489954,0.09543380303252941,-0.6366482407795528,1.0966608031702116]\n(5, 4) -> #1 [1.2590501823362539,-1.0164574457153759,2.649804965203706,-1.0651190107782906,-1.8945368456022722,1.4028811227448714,-0.03128814807953778,2.466253773352264,-2.3655724763280754,0.01735289477198626]\n(5, 5) -> #0 [1.9502502775738728,2.0783717163201034,-0.40644681234548363,-2.341858220790598,0.3002192001439468,0.9751968271193898,-0.2853779485089625,-2.576436048954775,-0.835711444017934,-0.08019924548729707]\n(5, 6) -> #1 [2.7270540212602796,-1.332067414071322,0.32004414256716895,-0.11119309459421511,-0.30691950339512153,-0.13710089454194385,-1.1082582653595523,-1.6555940390273391,-0.8091899995745837,-0.048354578821898586]\n(5, 7) -> #1 [1.4782076413898184,-0.6983095018428918,1.2589938428330343,-1.803243049663235,-0.46344811018862475,1.1832870408643381,-0.8988735776855463,-1.1293971161446912,-0.15026111456489222,1.8705310381783697]\n(5, 8) -> #1 [2.830205888159269,-0.7193175555978333,-0.3682114569697925,-0.6714024410622311,-0.6593760861639092,1.0276141714301772,0.0845114980703614,1.074831512327965,-2.2781778203231555,0.3069845634168446]\n(5, 9) -> #0 [2.2487377694918678,2.0565791099869455,-2.2938874505697493,-1.2165915788102541,0.5109263171216861,0.5924876830213409,-1.077636637751426,-1.1373741672505935,0.5678877605003664,1.108490149942666]\n(6, 0) -> #1 [2.4815503811295847,0.8158268894005124,1.3530959996316676,-1.6888791396832,-2.4396325826413383,-1.1975592140268019,-0.46449787783279256,0.993172068220609,-0.3546466650623876,-0.5255253151173604]\n(6, 1) -> #0 [2.775213198869496,-0.2892792165579744,-0.8263693510159206,-2.4540464321286097,-0.20668762915604705,2.076009875188438,-1.086497047507553,-0.7481205807088117,-0.09042720712833041,2.6333410297557895]\n(6, 2) -> #1 [0.9156314778288631,-0.6043457087881865,0.8908956412049737,-0.8682673128660345,-1.7551153085415727,0.011978118002222427,0.09015858877069483,-0.5017739066263687,-0.002079376400691446,0.7271667954523593]\n(6, 3) -> #1 [1.6110446479747313,-1.181327387470426,0.7554301575968543,-1.4982612443184546,-0.30680493525934105,0.829073763139224,-0.1201456639547,-1.0150683733432389,-2.03194623775195,0.819810263884256]\n(6, 4) -> #0 [1.6629105589744406,-0.17098817360825314,-1.0518582622175618,0.024166982795629677,1.4356109056397894,-0.1260806247197045,-0.3829101327983219,-2.262192103118804,0.21396020556297374,0.4549002331981804]\n(6, 5) -> #0 [1.1044035357467676,0.14880489139239372,-3.314812737226135,0.15860745980171065,-0.695790375288674,2.1835992634008305,-1.9946436817183995,-3.0856897015595433,-0.8916471853900776,2.933218845065957]\n(6, 6) -> #1 [1.4916706776339357,0.8690328766418428,3.5519558453625018,-0.39090455615317715,-0.9822349826388195,0.3986181707973521,-1.6210766536914958,2.12783420533219,0.5510658215715127,-1.529601761839727]\n(6, 7) -> #0 [2.3005912556769266,2.1051112701101804,-0.27709742682885297,-1.206325219488495,0.7194383931298438,1.6933961771242803,0.1371840470083986,-2.23555687609078,1.0998285985584098,0.8960773736613711]\n(6, 8) -> #0 [3.1705496805854465,1.2859530106693078,-3.8578865009060834,-1.0653856522282372,0.006658222283749848,1.381301750029773,0.5589233928852259,-1.8902756998840728,-0.6945027584203595,2.7586853830009304]\n(6, 9) -> #1 [1.3326820958902883,-0.9666131625023541,1.8264545458644885,-0.08615307640527825,0.11240695134955248,1.3379914367242005,-0.30476208252329173,0.13100193619473394,-1.0179150794201854,-0.17511075966524137]\n(7, 0) -> #1 [2.473178803270484,-0.11344341612530691,2.164259099925036,-0.7706422915227454,-1.289084918260258,0.4981235253910932,-1.1744127449873663,1.7422906392643822,-0.7201408523315679,0.45260650619570303]\n(7, 1) -> #1 [1.999649466172638,-1.1556324675466623,1.5493447622477754,-1.5366968959754075,-0.6110748369482553,0.5443517761334524,0.7854738247415447,2.4518744968539607,-1.5952359691288087,0.9314343756809011]\n(7, 2) -> #0 [3.337857785130257,1.7522521133339723,-1.0491399796370455,-3.313041502213455,0.40183479936356026,1.7263002856689535,-0.48023164130216345,-2.350607283943812,0.7087329517174662,1.9378376313715564]\n(7, 3) -> #0 [1.5930018639584753,1.8800079130614473,-2.7379456916297813,-0.32217096969794934,-1.3659757810559496,0.9785850393138118,-1.1783770906565638,0.7079013852201625,1.3301661859962894,-0.2729650916224946]\n(7, 4) -> #1 [1.1695810830333202,-0.6685271927494594,0.21284166835917806,-0.41119538647683873,-1.5866871639931825,1.5075335882943313,-2.0367155929002205,0.9262341743244722,-0.9643018685168068,-0.08813695366743962]\n(7, 5) -> #0 [3.5299192534959527,0.7764303542425187,-1.8446350802675222,-1.859118352833785,0.7337157500242545,1.0004890711080354,-0.13980788884718875,-0.020467437400944144,2.33331916239027,2.7386005743577275]\n(7, 6) -> #0 [2.5503396549878854,2.5282267014162962,-1.9576189760140326,-3.7423453861352884,-0.6852369434936492,0.5068244470340252,-0.009364225265108495,-0.6752589598201443,-0.1815751273967899,0.6377129661583096]\n(7, 7) -> #0 [2.526139642210598,2.164613485966985,-3.097641852876622,-0.6562652111751601,1.3852305227622304,0.6086572365225601,1.5365900860091388,-2.186342024961845,-1.6241979265369915,1.284464199445794]\n(7, 8) -> #0 [1.743315279456097,1.9708561547213432,-0.34933503688045875,-1.4267135092701473,-0.24566538370987517,0.5569526078316065,-0.29756222210617134,-2.5862470826522825,-0.9118839045113002,1.2075600600265963]\n(7, 9) -> #0 [3.294057276224038,1.2929167227844562,0.9518532488493103,-2.4219743064672152,0.15079331458242667,2.749626426704504,-0.3920228140679676,-1.9480700926566903,-0.1994181071604163,0.6865219153956094]\n(8, 0) -> #0 [2.3797000417328555,1.9716538846516496,-1.4589600004675933,-0.0284634600425282,0.06368436625609153,0.9915480259329298,0.5269233372389196,-2.250493268695532,0.4701367989522113,0.5939648566163273]\n(8, 1) -> #1 [2.7720566626456886,0.10488419853222243,1.4069209261837097,-1.197000108023393,-0.6707057858137091,0.871755177509677,-1.8107764087153602,-0.951345115903087,-0.9728805678771523,-0.04981550831795972]\n(8, 2) -> #1 [1.1948105166680958,0.7001945699722846,-0.15176314638691757,-0.34622935646845454,-2.450318921028882,-0.41733497785633294,-1.3444000695536529,-1.228094684166644,-1.3923782081952578,0.10756221613967079]\n(8, 3) -> #0 [1.6888528318457032,1.8385475679093735,-2.3441831543050107,-1.8837262557521686,-1.9619024946233758,-1.315468300673766,-1.0991796608710516,-2.3977083875633713,-0.7887160201948352,1.906906427861271]\n(8, 4) -> #1 [2.52913270953594,-0.4086324576488041,0.6307103393798115,-3.1373527317354855,-0.9082995790676607,-0.520641923897003,-0.8056883121841782,-0.3969949262599254,-1.4045451176747852,0.5424982457441068]\n(8, 5) -> #0 [1.5855221613449446,1.6299639139962419,-0.8122586966031211,-2.589115666343658,0.9032388428812905,0.3181951882292582,-1.5969116190918609,-1.2534623964207516,2.1944982509151165,3.252811461122362]\n(8, 6) -> #0 [2.7745438997911114,2.0196863256147766,-2.593457007045849,0.6739459838492292,1.1503022620242873,0.5915266654727743,0.6761177216491207,-1.313206816163271,0.3202016615629626,2.1999839416550104]\n(8, 7) -> #1 [-0.4073643618636811,1.3969827344454313,1.6455319370501251,-1.8370332016753512,-2.232166254343077,0.12798511611949043,0.24381983764479198,0.2237180193038939,-0.7301872060231671,0.7044008261430942]\n(8, 8) -> #1 [2.155757386937506,-1.42128272710327,1.064173838496039,-0.5330931514567447,-1.4813536419479976,-0.08977034685237967,-0.017533182337491404,-0.25872285535547546,-1.5602549197974738,1.320990093734269]\n(8, 9) -> #1 [2.398911607177346,1.5555530888544544,4.121613562771129,-0.19081047954759994,-2.6037357105919643,0.15595142555214497,-1.620692173688758,-0.18096415688900314,0.30747023491489167,-0.38008350057046086]\n(9, 0) -> #1 [1.3906187853939724,-0.8990725646508547,2.545796289386353,-1.576342806374432,-2.1041082239924878,0.39755780104432126,0.7212168407366282,0.3651591186626727,-0.415229218787999,-0.9975216366504049]\n(9, 1) -> #1 [2.288561883935601,1.2593984116177255,2.7832662646795856,-1.867861054160942,-0.6728488559073322,1.8721369824273482,0.2742278986861343,0.08340049854569365,-0.13533316862823686,-0.30003599063032355]\n(9, 2) -> #0 [1.4216122503483686,1.9571006771189303,-1.2990291258832156,-2.137028832954652,0.19701108718200394,0.9967755437347225,-1.6810317416051903,-0.6857533467995582,-0.4851103110748114,2.428983069624096]\n(9, 3) -> #0 [1.8465845961390368,1.986227663734653,-1.7966978360090615,-1.6615599481667678,-0.984278746648072,1.6557613483547198,-1.7040273291108419,-0.7626369253467536,-0.07443663670483398,2.5542785372186168]\n(9, 4) -> #0 [1.6018578684560933,1.7995312771583833,-1.4210283471933507,-0.6563990022973323,0.1293617265463885,0.8787887404956102,0.3100662962857136,-1.000359588531967,-0.2620410696144146,0.44865494689210017]\n(9, 5) -> #0 [2.775945694329656,-0.7355874110218236,-0.863945285131992,-1.5893034651265248,0.9067187763119877,2.1291598317305915,-1.9204924957035332,-0.9009237402034631,-1.7346274966954778,1.0158782730879494]\n(9, 6) -> #0 [1.6870305824305734,0.22384596958438874,-0.545355453060953,-0.6028341049201151,1.8069961800694065,-1.2947258622145097,-2.142159684309183,-3.4883588574490276,-1.590287150253462,2.0021716640882907]\n(9, 7) -> #1 [1.2791772129762953,-0.8426946560641153,1.1289045750398548,-0.23775867496309877,-1.7767916539853674,0.3981592643939559,0.15637567703517463,0.8003757952288632,-2.2055274526944535,0.36924940918449967]\n(9, 8) -> #1 [2.2512915715294604,-0.6267261124424239,1.6725602206531294,-1.0702464074841724,-1.3155322706534218,0.45147631685378226,1.2610176683579635,1.6939743804265253,-2.6944508679512493,-0.4394655633449473]\n(9, 9) -> #1 [1.1677796113132382,1.1957197202343834,1.8347343127456677,0.40892126135713625,-0.9721319062358926,-0.4251910483681272,-1.0688438082079694,0.3051937577411681,-0.21170014325058906,-0.3590691949629014]\n\nimport scala.math.max\nnbRowSOM: Int = 10\nnbColSOM: Int = 10\nnbIter: Int = 30\ndataNbObs: Int = 2000\ndataNbVars: Int = 10\ndataNbCls: Int = 2\ndatas: org.apache.spark.rdd.RDD[NamedVector] = MapPartitionsRDD[1] at map at <console>:215\nstartLearningTime: Long = 1497453572944\nsom: SomTrainerA = SomTrainerA@7fce0251\nsomOptions: scala.collection.immutable.Map[String,String] = Map(clustering.som.nbrow -> 10, clustering.som.nbcol -> 10)\nsomConvergeDist: Double = -0.1\nstartLearningTime: Long = 1497453572944\nmodel: AbstractModel =\n(0, 0) -> #0 [2.3241138609108276,0.11977313312704185,-0.7848463553072589,-1.965769806434134,0.6270093202770837,2.2671670755575626,-1.5586886120416685,-0.48463287775569674,0.98286090523545,1.1482032319423692]\n(0, 1) -> #1 [2.626214220349222,-0.0992905800529561,1.66266779888..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":25,"time":"Took: 48 seconds 32 milliseconds, at 2017-6-14 17:19"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1173344890-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"8EE2B170C9614FCB80D0ECF21F45D565"},"cell_type":"code","source":"datas.take(1)","outputs":[{"name":"stdout","output_type":"stream","text":"res37: Array[NamedVector] = Array(#0 [2.2838106309461095,1.8388158979655758,-1.8997332737817918,-2.2139805727986754,0.561955276145559,1.3692455912653108,-1.6344428147974537,-2.793286805356087,-0.38188902614175024,2.9724267847813004])\n"},{"metadata":{},"data":{"text/html":"<span style=\"color:red;\">Ooops, exception in the cell: $line70.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line70.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":26,"time":"Took: 3 seconds 454 milliseconds, at 2017-6-14 17:19"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CAE0F06E43984FB7B9E0A5C18E99DCC8"},"cell_type":"code","source":"object Output extends Serializable {\n  def addHeaderToRdd(sparkCtx: SparkContext, lines: RDD[String], header: String): RDD[String] = {\n    val headerRDD = sparkCtx.parallelize(List((-1L, header)))     // index the header with -1, so that the sort will put it on top.\n    val pairRDD = lines.zipWithIndex()\n    val pairRDD2 = pairRDD.map(t => (t._2, t._1))\n    val allRDD = pairRDD2.union(headerRDD)\n    val allSortedRDD = allRDD.sortByKey()\n    return allSortedRDD.values\n  }\n  def write(outputDir: String, datas: RDD[DenseVector], model: AbstractModel, nbRowSOM:Int, nbColSOM: Int) {\n      val dim = datas.take(1)(0).toArray.length\n      val datasWithIndex = datas.zipWithIndex.map(t => (t._2, t._1))\n    \n      val mapMin = Array.fill[Byte](dim)(0).mkString(\",\")\n      var header = \"# mapDim=2 mapSize={\"+ nbRowSOM +\",\" + nbColSOM + \"}\"\n      header += \" pointDim=\" + dim + \" pointRealDim=\" + dim + \" mapMin={\" + mapMin + \"}\"\n    \n      val prototypes = sc.parallelize(model.prototypes.map(d => (d.id, d._point))).sortByKey().values.collect()\n      println(\"Write Prototypes...\")\n      val protosString = sc.parallelize(prototypes).map(d => d.toArray.mkString(\",\"))\n      val protosResult = addHeaderToRdd(sc, protosString, header)\n      protosResult.coalesce(1).saveAsTextFile(outputDir+\"/maps\")\n\n      val sumAffectedDatas = datas.map(d => (model.findClosestPrototype(d).id, 1))\n        .reduceByKey{case (sum1, sum2) => sum1+sum2}\n        .collectAsMap() \n    \n      // fill in all the prototypes that have 0 observations\n      val card = (0 to prototypes.length - 1).map(d => {\n        if (sumAffectedDatas.contains(d)) {\n          sumAffectedDatas(d) + \"\"\n        } else {\n          \"0\"\n        }\n      })\n    \n      println(\"Write Cardinalities...\")\n      var cardHeader = \"# mapDim=2 mapSize={\"+ nbRowSOM +\",\" + nbColSOM + \"}\" \n      cardHeader +=  \"pointDim=1 pointRealDim=0 mapMin={0} mapMax={0}\"\n      val cardRdd = sc.parallelize(card)\n      val cardResult = addHeaderToRdd(sc, cardRdd, cardHeader)\n      cardResult.coalesce(1).saveAsTextFile(outputDir+\"/cards\")\n      \n    \n      val affHeader = \"# mapDim=1 mapSize={\" + datas.count() + \"} pointDim=1 pointRealDim=0 mapMin={0} mapMax={0}\"\n      val aff = datasWithIndex.map(d => (d._1, model.findClosestPrototype(d._2).id + \"\")).sortByKey().values\n      val affResult = addHeaderToRdd(sc, aff, affHeader)\n      println(\"Write Affiliate...\")\n      affResult.coalesce(1).saveAsTextFile(outputDir+\"/affs\")\n    \n      println(\"Write Maps...\")\n      val maps = sc.parallelize(prototypes.zip(card)).map(d => d._1.toArray.mkString(\",\") + \",\" + d._2)\n        .coalesce(1).saveAsTextFile(outputDir+\"/mapscard\")\n      println(\"Write successfully...\")\n  }\n}\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined object Output\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":27,"time":"Took: 3 seconds 673 milliseconds, at 2017-6-14 17:20"}]},{"metadata":{"id":"3FBBA4C01B7948E3960B93E17B8EB19A"},"cell_type":"markdown","source":"#MTM"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CF974265B6D5481E87519BE77BCE0E2E"},"cell_type":"code","source":"//package org.lipn.som.som\n\n/*import org.lipn.som.global.AbstractModel\nimport org.lipn.som.global.AbstractModel\nimport org.lipn.som.global.AbstractPrototype\nimport org.lipn.som.global.AbstractTrainer\nimport org.lipn.som.utils.NamedVector\nimport org.lipn.som.utils.DataGenerator\n*/\n\n\nobject RunMTM{\n  \n    def main(args:Array[String]) {\n      run(\n          sparkMaster = args(0),\n          intputFile = args(1),\n          outputDir = args(2),\n          execName = args(3),\n          nbRow = args(4).toInt,\n          nbCol = args(5).toInt,\n          tmin = args(6).toDouble,\n          tmax = args(7).toDouble,\n          convergeDist = args(8).toDouble,\n          maxIter = args(9).toInt,\n          sep = args(10),\n          initMap = args(11).toInt, //0: initialisation aleatoire\n          initMapFile = args(12)\n      )  \n    }\n  \n  def run(\n    sparkMaster: String,\n    intputFile: String,\n    outputDir: String,\n    execName: String = \"RunSom\",\n    nbRow: Int = 10, \n    nbCol: Int = 10, \n    tmin: Double = 0.9, \n    tmax: Double = 8,\n    convergeDist: Double = -0.001,\n    maxIter: Int = 50,\n    sep : String = \";\",\n    initMap: Int = 0,\n    initMapFile : String = \"\",\n    nbRealVars : Int = 10\n    ) = {\n//     val sparkConf = new SparkConf().setAppName(execName)\n//     sparkConf.setMaster(sparkMaster)\n//     val sc = new SparkContext(sparkConf)\n\n    val somOptions = Map(\n        \"clustering.som.nbrow\" -> nbRow.toString, \n        \"clustering.som.nbcol\" -> nbCol.toString,\n        \"clustering.som.tmin\" -> tmin.toString,\n        \"clustering.som.tmax\" -> tmax.toString,\n        \"clustering.som.initMap\" -> initMap.toString,\n        \"clustering.som.initMapFile\" -> initMapFile.toString,   \n        \"clustering.som.separator\" -> sep.toString,\n        \"clustering.som.nbRealVars\" -> nbRealVars.toString\n        )\n\n    val trainingDataset = sc.textFile(intputFile).map(x => new DenseVector(x.split(sep).map(_.toDouble))).cache() \n\n    println(s\"nbRow: ${trainingDataset.count()}\")\n    \n    val som = new SomTrainerA\n    val startLearningTime = System.currentTimeMillis()\n    val model = som.training(trainingDataset, somOptions, maxIter, convergeDist)\n    val somDuration = Duration(System.currentTimeMillis() - startLearningTime, MILLISECONDS)\n    \n    Output.write(outputDir, trainingDataset, model, nbRow, nbCol)\n    model\n  }\n}\n\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined object RunMTM\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":28,"time":"Took: 2 seconds 571 milliseconds, at 2017-6-14 17:20"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"4619E4C59C7E41AAA549D3EA0B9A20FF"},"cell_type":"code","source":"val sparkMaster = \"MTM\"\nval intputFile = \"/Users/caoquan/MEGA/M1/UP13/Project/work/data/six.txt\"\nval outputDir = \"/Users/caoquan/output\"\nval execName = \"MTM\"\nval nbRow = 5\nval nbCol = 5\nval sep = \" \"\nval tmin: Double = 0.9\nval tmax: Double = 8\nval convergeDist: Double = -0.001\nval maxIter: Int = 50\nval initMap: Int = 0\nval initMapFile : String = \"\"\nval nbRealVars : Int = 10\n\n\nval model = RunMTM.run(\n    sparkMaster,\n    intputFile,\n    outputDir,\n    execName,\n    nbRow, \n    nbCol, \n    tmin, \n    tmax,\n    convergeDist,\n    maxIter,\n    sep,\n    initMap,\n    initMapFile,\n    nbRealVars\n    )","outputs":[{"name":"stdout","output_type":"stream","text":"nbRow: 1800\nle model apres training est : (0, 0) -> [9.27394970808058,5.12552473329351]\n(0, 1) -> [3.54671598377464,8.12587715300214]\n(0, 2) -> [4.83026153523215,8.50575895091193]\n(0, 3) -> [7.35593229883286,4.01891890877038]\n(0, 4) -> [9.5927954055672,5.93315911130176]\n(1, 0) -> [9.09263210776325,5.21525543450612]\n(1, 1) -> [7.58812401409192,1.58908462531257]\n(1, 2) -> [2.63961391083226,4.41287028650443]\n(1, 3) -> [4.63851850399811,9.88389475102007]\n(1, 4) -> [9.82525782296377,5.73821967376916]\n(2, 0) -> [2.20260777998027,-0.467098489053338]\n(2, 1) -> [3.84343253616162,1.2595138204498]\n(2, 2) -> [6.0071404608005,3.09294275579907]\n(2, 3) -> [1.63561800111297,-0.757293249410894]\n(2, 4) -> [6.17468052502606,6.98342652821021]\n(3, 0) -> [0.0315086105467576,-0.859868289212358]\n(3, 1) -> [1.92961244980185,6.32280995727443]\n(3, 2) -> [-0.884550205102836,0.00695541728918629]\n(3, 3) -> [7.24806204001898,5.45114129969797]\n(3, 4) -> [-0.663810650832127,0.673518960470668]\n(4, 0) -> [7.43091096698696,3.42943981561269]\n(4, 1) -> [4.73969956576272,7.69548115471036]\n(4, 2) -> [8.0545138028029,4.83948400692703]\n(4, 3) -> [-0.594418681687869,-0.0250625249053534]\n(4, 4) -> [1.65765487199236,5.8688323217936]\n\nWrite Prototypes...\nWrite Cardinalities...\nWrite Affiliate...\nWrite Maps...\nWrite successfully...\nsparkMaster: String = MTM\nintputFile: String = /Users/caoquan/MEGA/M1/UP13/Project/work/data/six.txt\noutputDir: String = /Users/caoquan/output\nexecName: String = MTM\nnbRow: Int = 5\nnbCol: Int = 5\nsep: String = \" \"\ntmin: Double = 0.9\ntmax: Double = 8.0\nconvergeDist: Double = -0.001\nmaxIter: Int = 50\ninitMap: Int = 0\ninitMapFile: String = \"\"\nnbRealVars: Int = 10\nmodel: AbstractModel =\n(0, 0) -> [9.27394970808058,5.12552473329351]\n(0, 1) -> [3.54671598377464,8.12587715300214]\n(0, 2) -> [4.83026153523215,8.50575895091193]\n(0, 3) -> [7.35593229883286,4.01891890877038]\n(0, 4) -> [9.5927954055672,5.93315911130176]\n(1, 0) -> [9.09263210776325,5.21525543450612]\n(1, 1) -> [7.58812401409192,1.58908462531257]\n(1, 2) -> [2.63961391083226,4.41287028650443]\n(1, 3) -> [4.63851850399811,9.88389475102007..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":29,"time":"Took: 10 seconds 674 milliseconds, at 2017-6-14 17:20"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"D7744B91C78B4A3BA478838EC81CCEB1"},"cell_type":"code","source":"val dataset = sc.textFile(intputFile).map(x => x.split(\" \").map(_.toDouble)).zipWithIndex().map(t => (t._2.toInt,t._1))\n\nval dataProtos = sc.textFile(\"/Users/caoquan/output/maps/part-00000\")\nval headerProtos = dataProtos.first() \nval protos = dataProtos.filter(row => row != headerProtos).map(_.split(\",\").map(_.toDouble)).map(t => (-1,t))\nval x = protos.union(dataset).sortByKey().values.collect\n\nval dataY = sc.textFile(\"/Users/caoquan/output/affs/part-00000\")\nval headerY = dataY.first() \nvar y = dataY.filter(row => row != headerY).map(_.toInt).collect \n\nval protosY = Array.fill(protos.count().toInt)(-1)\ny = protosY ++ y\n\nval labels = Array('Q') ++ Array.fill(protos.count().toInt)('.')\n\nplot(x, y, labels, Palette.COLORS)","outputs":[{"name":"stdout","output_type":"stream","text":"dataset: org.apache.spark.rdd.RDD[(Int, Array[Double])] = MapPartitionsRDD[284] at map at <console>:198\ndataProtos: org.apache.spark.rdd.RDD[String] = /Users/caoquan/output/maps/part-00000 MapPartitionsRDD[286] at textFile at <console>:200\nheaderProtos: String = # mapDim=2 mapSize={5,5} pointDim=2 pointRealDim=2 mapMin={0,0}\nprotos: org.apache.spark.rdd.RDD[(Int, Array[Double])] = MapPartitionsRDD[289] at map at <console>:202\nx: Array[Array[Double]] = Array(Array(6.449404263153461, 1.3822759995302427), Array(7.361234032191701, 2.1378594278258096), Array(7.787150246356894, 3.425920868128264), Array(8.134403485233651, 5.104593904569314), Array(8.271443533174084, 6.31859981532016), Array(4.8064548867025305, 1.0102058468074822), Array(5.857797553310866, 2.0582312300118337), Array(6.41494025..."},{"metadata":{},"data":{"text/html":"Window(javax.swing.JFrame[frame3,140,23,1000x773,layout=java.awt.BorderLayout,title=Smile Plot 4,resizable,normal,defaultCloseOperation=DISPOSE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,22,1000x751,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true],smile.plot.PlotCanvas[,0,0,1000x751,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=])"},"output_type":"execute_result","execution_count":69,"time":"Took: 6 seconds 415 milliseconds, at 2017-6-14 17:59"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C5C7427F5A3D48729D99F911096FF638"},"cell_type":"code","source":"println(x.length)\nprintln(y.length)","outputs":[{"name":"stdout","output_type":"stream","text":"1800\n1800\n"},{"metadata":{},"data":{"text/html":"<span style=\"color:red;\">Ooops, exception in the cell: $line158.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()</span><pre style=\"color:#999;\">java.lang.NoSuchMethodException: $line158.$rendered$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.rendered()\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat notebook.kernel.Repl.iws$1(Repl.scala:267)\n\tat notebook.kernel.Repl.liftedTree1$1(Repl.scala:273)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:241)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.replEvaluate$1(ReplCalculator.scala:403)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:416)\n\tat notebook.client.ReplCalculator$$anonfun$13$$anon$1$$anonfun$30.apply(ReplCalculator.scala:397)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n</pre>"},"output_type":"execute_result","execution_count":63,"time":"Took: 4 seconds 357 milliseconds, at 2017-6-14 17:53"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"E10CC94A41A1482F84FB868D6F99BADF"},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}